{"version":3,"file":"Ask-c8e3f689.js","sources":["../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, ICheckboxProps, ITextFieldProps } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\n\r\nimport styles from \"./Ask.module.css\";\r\n\r\nimport { askApi, configApi, getSpeechApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\nimport { useLogin, getToken, requireAccessControl, checkLoggedIn } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { toolTipText } from \"../../i18n/tooltips.js\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\n\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { LoginContext } from \"../../loginContext\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [seed, setSeed] = useState<number | null>(null);\r\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\r\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\r\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\r\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\r\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<ChatAppResponse>();\r\n    const [speechUrl, setSpeechUrl] = useState<string | null>(null);\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    const getConfig = async () => {\r\n        configApi().then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n            setShowUserUpload(config.showUserUpload);\r\n            setShowSpeechInput(config.showSpeechInput);\r\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\r\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (answer && showSpeechOutputAzure) {\r\n            getSpeechApi(answer.message.content).then(speechUrl => {\r\n                setSpeechUrl(speechUrl);\r\n            });\r\n        }\r\n    }, [answer]);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const request: ChatAppRequest = {\r\n                messages: [\r\n                    {\r\n                        content: question,\r\n                        role: \"user\"\r\n                    }\r\n                ],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        temperature: temperature,\r\n                        minimum_reranker_score: minimumRerankerScore,\r\n                        minimum_search_score: minimumSearchScore,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput,\r\n                        ...(seed !== null ? { seed: seed } : {})\r\n                    }\r\n                },\r\n                // AI Chat Protocol: Client must pass on any session state received from the server\r\n                session_state: answer ? answer.session_state : null\r\n            };\r\n            const result = await askApi(request, token);\r\n            setAnswer(result);\r\n            setSpeechUrl(null);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setTemperature(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onSeedChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setSeed(parseInt(newValue || \"\"));\r\n    };\r\n\r\n    const onMinimumSearchScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumSearchScore(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onMinimumRerankerScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumRerankerScore(parseFloat(newValue || \"0\"));\r\n    };\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n        setQuestion(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    // IDs for form labels and their associated callouts\r\n    const promptTemplateId = useId(\"promptTemplate\");\r\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\r\n    const temperatureId = useId(\"temperature\");\r\n    const temperatureFieldId = useId(\"temperatureField\");\r\n    const seedId = useId(\"seed\");\r\n    const seedFieldId = useId(\"seedField\");\r\n    const searchScoreId = useId(\"searchScore\");\r\n    const searchScoreFieldId = useId(\"searchScoreField\");\r\n    const rerankerScoreId = useId(\"rerankerScore\");\r\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\r\n    const retrieveCountId = useId(\"retrieveCount\");\r\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\r\n    const excludeCategoryId = useId(\"excludeCategory\");\r\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\r\n    const semanticRankerId = useId(\"semanticRanker\");\r\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\r\n    const semanticCaptionsId = useId(\"semanticCaptions\");\r\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\r\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\r\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\r\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\r\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\r\n\r\n    return (\r\n        <div className={styles.askContainer}>\r\n            <div className={styles.askTopSection}>\r\n                <div className={styles.commandsContainer}>\r\n                    {showUserUpload && <UploadFile className={styles.commandButton} disabled={loggedIn} />}\r\n                    <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                </div>\r\n                <h1 className={styles.askTitle}>Ask your data</h1>\r\n                <div className={styles.askQuestionInput}>\r\n                    <QuestionInput\r\n                        placeholder=\"Example: Does my plan cover annual eye exams?\"\r\n                        disabled={isLoading}\r\n                        initQuestion={question}\r\n                        onSend={question => makeApiRequest(question)}\r\n                        showSpeechInput={showSpeechInput}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.askBottomSection}>\r\n                {isLoading && <Spinner label=\"Generating answer\" />}\r\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.askAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            isStreaming={false}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                            showSpeechOutputAzure={showSpeechOutputAzure}\r\n                            showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                            speechUrl={speechUrl}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.askAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.askAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <Panel\r\n                headerText=\"Configure answer generation\"\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel=\"Close\"\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <TextField\r\n                    id={promptTemplateFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    defaultValue={promptTemplate}\r\n                    label=\"Override prompt template\"\r\n                    multiline\r\n                    autoAdjustHeight\r\n                    onChange={onPromptTemplateChange}\r\n                    aria-labelledby={promptTemplateId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={promptTemplateId} fieldId={promptTemplateFieldId} helpText={toolTipText.promptTemplate} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={temperatureFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label=\"Temperature\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    max={1}\r\n                    step={0.1}\r\n                    defaultValue={temperature.toString()}\r\n                    onChange={onTemperatureChange}\r\n                    aria-labelledby={temperatureId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={toolTipText.temperature} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={seedFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label=\"Seed\"\r\n                    type=\"text\"\r\n                    defaultValue={seed?.toString() || \"\"}\r\n                    onChange={onSeedChange}\r\n                    aria-labelledby={seedId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={toolTipText.seed} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={searchScoreFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label=\"Minimum search score\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    defaultValue={minimumSearchScore.toString()}\r\n                    onChange={onMinimumSearchScoreChange}\r\n                    aria-labelledby={searchScoreId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={toolTipText.searchScore} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                {showSemanticRankerOption && (\r\n                    <TextField\r\n                        id={rerankerScoreFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Minimum reranker score\"\r\n                        type=\"number\"\r\n                        min={1}\r\n                        max={4}\r\n                        step={0.1}\r\n                        defaultValue={minimumRerankerScore.toString()}\r\n                        onChange={onMinimumRerankerScoreChange}\r\n                        aria-labelledby={rerankerScoreId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout labelId={rerankerScoreId} fieldId={rerankerScoreFieldId} helpText={toolTipText.rerankerScore} label={props?.label} />\r\n                        )}\r\n                    />\r\n                )}\r\n\r\n                <TextField\r\n                    id={retrieveCountFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label=\"Retrieve this many search results:\"\r\n                    type=\"number\"\r\n                    min={1}\r\n                    max={50}\r\n                    defaultValue={retrieveCount.toString()}\r\n                    onChange={onRetrieveCountChange}\r\n                    aria-labelledby={retrieveCountId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={retrieveCountId} fieldId={retrieveCountFieldId} helpText={toolTipText.retrieveNumber} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={excludeCategoryFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label=\"Exclude category\"\r\n                    defaultValue={excludeCategory}\r\n                    onChange={onExcludeCategoryChanged}\r\n                    aria-labelledby={excludeCategoryId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={excludeCategoryId} fieldId={excludeCategoryFieldId} helpText={toolTipText.excludeCategory} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                {showSemanticRankerOption && (\r\n                    <>\r\n                        <Checkbox\r\n                            id={semanticRankerFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useSemanticRanker}\r\n                            label=\"Use semantic ranker for retrieval\"\r\n                            onChange={onUseSemanticRankerChange}\r\n                            aria-labelledby={semanticRankerId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={semanticRankerId}\r\n                                    fieldId={semanticRankerFieldId}\r\n                                    helpText={toolTipText.useSemanticReranker}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Checkbox\r\n                            id={semanticCaptionsFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useSemanticCaptions}\r\n                            label=\"Use semantic captions\"\r\n                            onChange={onUseSemanticCaptionsChange}\r\n                            disabled={!useSemanticRanker}\r\n                            aria-labelledby={semanticCaptionsId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={semanticCaptionsId}\r\n                                    fieldId={semanticCaptionsFieldId}\r\n                                    helpText={toolTipText.useSemanticCaptions}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n                {showGPT4VOptions && (\r\n                    <GPT4VSettings\r\n                        gpt4vInputs={gpt4vInput}\r\n                        isUseGPT4V={useGPT4V}\r\n                        updateUseGPT4V={useGPT4V => {\r\n                            setUseGPT4V(useGPT4V);\r\n                        }}\r\n                        updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                    />\r\n                )}\r\n\r\n                {showVectorOption && (\r\n                    <VectorSettings\r\n                        defaultRetrievalMode={retrievalMode}\r\n                        showImageOptions={useGPT4V && showGPT4VOptions}\r\n                        updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\r\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                    />\r\n                )}\r\n\r\n                {useLogin && (\r\n                    <>\r\n                        <Checkbox\r\n                            id={useOidSecurityFilterFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useOidSecurityFilter || requireAccessControl}\r\n                            label=\"Use oid security filter\"\r\n                            disabled={!loggedIn || requireAccessControl}\r\n                            onChange={onUseOidSecurityFilterChange}\r\n                            aria-labelledby={useOidSecurityFilterId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={useOidSecurityFilterId}\r\n                                    fieldId={useOidSecurityFilterFieldId}\r\n                                    helpText={toolTipText.useOidSecurityFilter}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Checkbox\r\n                            id={useGroupsSecurityFilterFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useGroupsSecurityFilter || requireAccessControl}\r\n                            label=\"Use groups security filter\"\r\n                            disabled={!loggedIn || requireAccessControl}\r\n                            onChange={onUseGroupsSecurityFilterChange}\r\n                            aria-labelledby={useGroupsSecurityFilterId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={useGroupsSecurityFilterId}\r\n                                    fieldId={useGroupsSecurityFilterFieldId}\r\n                                    helpText={toolTipText.useGroupsSecurityFilter}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </>\r\n                )}\r\n                {useLogin && <TokenClaimsDisplay />}\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"Ask\";\r\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showSpeechInput","setShowSpeechInput","showSpeechOutputBrowser","setShowSpeechOutputBrowser","showSpeechOutputAzure","setShowSpeechOutputAzure","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","speechUrl","setSpeechUrl","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useMsal","loggedIn","useContext","LoginContext","getConfig","configApi","config","useEffect","getSpeechApi","makeApiRequest","token","getToken","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onTemperatureChange","onSeedChange","onMinimumSearchScoreChange","onMinimumRerankerScoreChange","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","promptTemplateId","useId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","jsxs","styles","UploadFile","jsx","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","props","HelpCallout","toolTipText","Fragment","Checkbox","GPT4VSettings","inputs","VectorSettings","options","requireAccessControl","TokenClaimsDisplay"],"mappings":"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"}