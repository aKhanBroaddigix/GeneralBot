{"version":3,"mappings":"6hEAIMA,GAA0B,WAC1BC,GAAiC,gBACjCC,GAA2B,0CAiDjC,eAAeC,IAAqC,CAC1C,MAAAC,EAAW,MAAM,MAAM,aAAa,EACtC,IAACA,EAAS,GACV,MAAM,IAAI,MAAM,mCAAmCA,EAAS,MAAM,EAAE,EAEjE,aAAMA,EAAS,MAC1B,CAEA,MAAMC,EAAY,MAAMF,KACxB,QAAQ,IAAI,sBAAuBE,EAAU,UAAU,EACvDA,EAAU,SAAW,GACrBA,EAAU,qBAAuB,GAK1B,MAAMC,GAAuBD,EAAU,qBAEjCE,GAA8BF,EAAU,4BAExCG,GAAeF,IAAwB,CAACC,GAOxCE,GAAaJ,EAAU,WAQvBK,GAAeL,EAAU,aAEhCM,GAAeN,EAAU,aAGlBO,GAAiB,IACnB,OAAO,SAAS,OAASP,EAAU,WAAW,KAAK,YAQ9D,WAAW,uBAAyB,KASpC,MAAMQ,GAAsB,IAAwC,CAC1D,MAAAC,EAAmBC,GAAuC,CACtD,MAAAC,MAAkB,KAExB,OADsB,IAAI,KAAKD,EAAiB,UAAU,EACnCC,CAAA,EAG3B,GAAI,WAAW,wBAA0BF,EAAgB,WAAW,sBAAsB,EAC/E,eAAQ,QAAQ,WAAW,sBAAsB,EAG5D,MAAMG,EAAoE,IAC/D,MAAMjB,EAAuB,EAAE,KAAUkB,GACxCA,EAAE,GACKA,EAAE,OAAO,KAAaC,GACrBA,EAAK,OAAS,EACP,CACH,SAAUA,EAAK,CAAC,EAAE,SAClB,aAAcA,EAAK,CAAC,EAAE,aACtB,YAAaA,EAAK,CAAC,EAAE,YAAe,OAAO,CAACC,EAA0BC,KAC9DD,EAAAC,EAAK,GAAG,EAAIA,EAAK,IACdD,GACR,EAAE,EACL,WAAYD,EAAK,CAAC,EAAE,UAAY,EAIjC,IACV,EAGE,IACV,EAGE,OAAAF,EAA4B,OAAcK,GACzCA,EACIR,EAAgBQ,CAAK,GACrB,WAAW,uBAAyBA,EAC7BA,GAGJ,MAAMrB,EAA8B,EAAE,KAAU,GAC/C,EAAE,GACKgB,EAA0B,EAE9B,IACV,EAGE,IACV,CACL,EAEaM,GAA2B,MAAMV,GAA0B,QAI3DW,GAAoB,IAAM,CACnC,OAAO,SAAS,KAAOtB,EAC3B,EAOauB,GAAgB,MAAOC,GAC5B,GAAAA,GACsBA,EAAO,oBAMR,MAAMb,MAWtBc,GAAW,MAAOD,GAAkE,CACvF,MAAAX,EAAmB,MAAMF,KAC/B,OAAIE,EACO,QAAQ,QAAQA,EAAiB,YAAY,EAGjDW,EACF,mBAAmB,CAChB,GAAGf,GACH,YAAaC,GAAe,EAC/B,EACA,KAAKM,GAAKA,EAAE,WAAW,EACvB,MAAeU,GAAA,CACZ,QAAQ,IAAIA,CAAK,CACV,CACV,CACT,EAQaC,GAAc,MAAOH,GAA6D,CACrF,MAAAI,EAAgBJ,EAAO,mBAC7B,GAAII,EACA,OAAOA,EAAc,SAGnB,MAAAf,EAAmB,MAAMF,KAC/B,OAAIE,GAAkB,YACXA,EAAiB,YAAY,mBAGjC,IACX,EAQagB,GAAiB,MAAOL,GAAmF,CAC9G,MAAAI,EAAgBJ,EAAO,mBAC7B,GAAII,EACA,OAAOA,EAAc,cAGnB,MAAAf,EAAmB,MAAMF,KAC/B,GAAIE,EACA,OAAOA,EAAiB,WAIhC,EC/PMiB,GAAc,GAKpB,eAAsBC,EAAWC,EAA8D,CAEvF,MAAY,CAACX,IACTW,EACO,CAAE,cAAe,UAAUA,CAAO,EAAG,EAI7C,EACX,CAEA,eAAsBC,IAA6B,CAKvC,aAJS,MAAM,MAAM,GAAGH,EAAW,UAAW,CAClD,OAAQ,MACX,GAEsB,MAC3B,CAEsB,eAAAI,GAAOC,EAAyBH,EAAuD,CACnG,MAAAI,EAAU,MAAML,EAAWC,CAAO,EAClC9B,EAAW,MAAM,MAAM,GAAG4B,EAAW,OAAQ,CAC/C,OAAQ,OACR,QAAS,CAAE,GAAGM,EAAS,eAAgB,kBAAmB,EAC1D,KAAM,KAAK,UAAUD,CAAO,EAC/B,EAEKE,EAAyC,MAAMnC,EAAS,OAC9D,GAAIA,EAAS,OAAS,KAAO,CAACA,EAAS,GAC7B,YAAMmC,EAAe,OAAS,eAAe,EAGhD,OAAAA,CACX,CAEsB,eAAAC,GAAQH,EAAyBI,EAAuBP,EAAgD,CACtH,IAAAQ,EAAM,GAAGV,EAAW,QACpBS,IACOC,GAAA,WAEL,MAAAJ,EAAU,MAAML,EAAWC,CAAO,EACjC,aAAM,MAAMQ,EAAK,CACpB,OAAQ,OACR,QAAS,CAAE,GAAGJ,EAAS,eAAgB,kBAAmB,EAC1D,KAAM,KAAK,UAAUD,CAAO,EAC/B,CACL,CAEA,eAAsBM,GAAaC,EAAsC,CAC9D,aAAM,MAAM,UAAW,CAC1B,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAU,CACjB,KAAAA,CAAA,CACH,EACJ,EACI,KAAiBxC,GACVA,EAAS,QAAU,IACZA,EAAS,OACTA,EAAS,QAAU,KAC1B,QAAQ,IAAI,kCAAkC,EACvC,OAEP,QAAQ,MAAM,iCAAiC,EACxC,KAEd,EACA,KAAKyC,GAASA,EAAO,IAAI,gBAAgBA,CAAI,EAAI,IAAK,CAC/D,CAEO,SAASC,GAAoBC,EAA0B,CACnD,SAAGf,EAAW,YAAYe,CAAQ,EAC7C,CAEsB,eAAAC,GAAcX,EAAmBH,EAA6C,CAC1F,MAAA9B,EAAW,MAAM,MAAM,UAAW,CACpC,OAAQ,OACR,QAAS,MAAM6B,EAAWC,CAAO,EACjC,KAAMG,CAAA,CACT,EAEG,IAACjC,EAAS,GACV,MAAM,IAAI,MAAM,2BAA2BA,EAAS,UAAU,EAAE,EAI7D,OADiC,MAAMA,EAAS,MAE3D,CAEsB,eAAA6C,GAAsBC,EAAkBhB,EAA6C,CACjG,MAAAI,EAAU,MAAML,EAAWC,CAAO,EAClC9B,EAAW,MAAM,MAAM,mBAAoB,CAC7C,OAAQ,OACR,QAAS,CAAE,GAAGkC,EAAS,eAAgB,kBAAmB,EAC1D,KAAM,KAAK,UAAU,CAAE,SAAAY,EAAU,EACpC,EAEG,IAAC9C,EAAS,GACV,MAAM,IAAI,MAAM,yBAAyBA,EAAS,UAAU,EAAE,EAI3D,OADiC,MAAMA,EAAS,MAE3D,CAEA,eAAsB+C,GAAqBjB,EAAoC,CACrE,MAAA9B,EAAW,MAAM,MAAM,iBAAkB,CAC3C,OAAQ,MACR,QAAS,MAAM6B,EAAWC,CAAO,EACpC,EAEG,IAAC9B,EAAS,GACV,MAAM,IAAI,MAAM,yBAAyBA,EAAS,UAAU,EAAE,EAI3D,OADwB,MAAMA,EAAS,MAElD,CC5HkB,IAAAgD,OACdA,EAAA,OAAS,SACTA,EAAA,QAAU,UACVA,EAAA,KAAO,OAHOA,OAAA,IAMAC,OACdA,EAAA,cAAgB,gBAChBA,EAAA,OAAS,SACTA,EAAA,MAAQ,QAHMA,OAAA,IAMAC,OACdA,EAAA,UAAY,YACZA,EAAA,eAAiB,iBACjBA,EAAA,KAAO,OAHOA,OAAA,8mBCJF,SAAAC,GAAkBC,EAAgBC,EAAsBC,EAAyE,CAC7I,MAAMC,EAAsB,GAGxB,IAAAC,EAAeJ,EAAO,OAG1B,GAAIC,EAAa,CACb,IAAII,EAAYD,EAAa,OAC7B,QAASE,EAAIF,EAAa,OAAS,EAAGE,GAAK,GACnCF,EAAaE,CAAC,IAAM,IADkBA,IAG/B,GAAAF,EAAaE,CAAC,IAAM,IAAK,CACpBD,EAAAC,EACZ,KACJ,CAGWF,EADSA,EAAa,UAAU,EAAGC,CAAS,CAE/D,CA0BO,OACH,WAzBUD,EAAa,MAAM,eAAe,EAEd,IAAI,CAACG,EAAMC,IAAU,CAC/C,GAAAA,EAAQ,IAAM,EACP,OAAAD,EACJ,CACC,IAAAE,EACAN,EAAU,QAAQI,CAAI,IAAM,GACZE,EAAAN,EAAU,QAAQI,CAAI,EAAI,GAE1CJ,EAAU,KAAKI,CAAI,EACnBE,EAAgBN,EAAU,QAGxB,MAAAO,EAAOpB,GAAoBiB,CAAI,EAE9B,OAAAI,GACFC,EAAA,SAAE,UAAU,eAAe,MAAOL,EAAM,QAAS,IAAML,EAAkBQ,CAAI,EAC1E,SAACE,MAAA,OAAK,UAAc,GACxB,EAER,EACH,EAGyB,KAAK,EAAE,EAC7B,UAAAT,CAAA,CAER,CCvDO,MAAMU,GAAa,UACdC,GAAgB,aAAa,yBAA0B,cAAY,OAAO,aAAW,aAAc,GCIzGC,GAAmB,OAAe,iBAAoB,OAAe,sBAE3E,IAAIC,EAAgC,KAEpC,GAAI,CACQA,EAAAD,EACZ,MAAc,CACV,QAAQ,MAAM,kCAAkC,CACpD,CAEA,MAAME,GAAe,SAAU7B,EAAc,CACzC,GAAI4B,EAAO,CACD,MAAAE,EAAY,IAAI,yBAAyB9B,CAAI,EACnD,OAAA8B,EAAU,KAAO,QACjBA,EAAU,OAAS,EACnBA,EAAU,KAAO,EACjBA,EAAU,MAAQ,EACRA,EAAA,MAAQF,EAAM,UAAY,SAAQG,GAAgCA,EAAM,OAAS,OAAO,EAAE,CAAC,EAC9FD,CACX,CACJ,EAEaE,GAAsB,CAAC,CAAE,OAAApB,KAAoB,CACtD,KAAM,CAACqB,EAAWC,CAAY,EAAIC,WAAkB,EAAK,EAEnDC,EAAqBxB,GAAmB,CAC1C,GAAIgB,GAAS,KAAM,CACf,GAAIK,EAAW,CACXL,EAAM,OAAO,EACbM,EAAa,EAAK,EAClB,MACJ,CACM,MAAAJ,EAAkDD,GAAajB,CAAM,EAE3E,GAAI,CAACkB,EACD,OAGJF,EAAM,MAAME,CAAS,EAErBA,EAAU,QAAU,IAAM,CACtBI,EAAa,EAAI,CACjB,EAGJJ,EAAU,MAAQ,IAAM,CACpBI,EAAa,EAAK,CAClB,CAER,GAEEG,EAAQJ,EAAY,MAAQ,QAG9B,OAAAT,EAAA,IAACc,EAAA,CACG,MAAO,CAAE,MAAAD,CAAa,EACtB,UAAW,CAAE,SAAU,SAAU,EACjC,MAAM,eACN,UAAU,eACV,QAAS,IAAMD,EAAkBxB,CAAM,EACvC,SAAU,CAACgB,CAAA,EAGvB,EC9DA,IAAIW,GAAQ,IAAI,MAET,MAAMC,GAAoB,CAAC,CAAE,IAAA1C,KAAiB,CACjD,KAAM,CAACmC,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAE1CM,EAAmB,SAAY,CACjC,GAAIR,EAAW,CACXM,GAAM,MAAM,EACZL,EAAa,EAAK,EAClB,MACJ,CAEA,GAAI,CAACpC,EAAK,CACN,QAAQ,MAAM,qCAAqC,EACnD,MACJ,CACQyC,GAAA,IAAI,MAAMzC,CAAG,EACrB,MAAMyC,GAAM,OACNA,GAAA,iBAAiB,QAAS,IAAM,CAClCL,EAAa,EAAK,EACrB,EACDA,EAAa,EAAI,GAGfG,EAAQJ,EAAY,MAAQ,QAE9B,OAAAT,EAAA,IAACc,EAAA,CACG,MAAO,CAAE,MAAAD,CAAa,EACtB,UAAW,CAAE,SAAU,SAAU,EACjC,MAAM,eACN,UAAU,eACV,QAAS,IAAMI,EAAiB,EAChC,SAAU,CAAC3C,CAAA,EAGvB,EClBa4C,GAAS,CAAC,CACnB,OAAA9B,EACA,WAAA+B,EACA,YAAA9B,EACA,kBAAAC,EACA,wBAAA8B,EACA,2BAAAC,EACA,0BAAAC,EACA,sBAAAC,EACA,sBAAAC,EACA,wBAAAC,EACA,UAAAC,CACJ,IAAa,CACH,MAAAC,EAAoBvC,EAAO,SAAS,mBACpCwC,EAAiBxC,EAAO,QAAQ,QAChCI,EAAeqC,UAAQ,IAAM1C,GAAkByC,EAAgBvC,EAAaC,CAAiB,EAAG,CAACF,CAAM,CAAC,EAExG0C,EAAsBC,GAAU,SAASvC,EAAa,UAAU,EAEtE,OACKwC,OAAAC,EAAA,CAAM,UAAW,GAAGC,EAAO,eAAe,IAAIf,GAAce,EAAO,QAAQ,GAAI,cAAc,gBAC1F,UAAClC,MAAAiC,EAAM,KAAN,CACG,SAAAD,EAAA,KAACC,GAAM,WAAU,GAAC,gBAAgB,gBAC9B,UAAAjC,EAAA,IAACC,GAAW,WACX,MACG,WAAAD,EAAA,IAACc,EAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,WAAY,EACnC,MAAM,uBACN,UAAU,uBACV,QAAS,IAAMM,EAAwB,EACvC,SAAU,CAAChC,EAAO,QAAQ,UAAU,OACxC,EACAY,EAAA,IAACc,EAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,eAAgB,EACvC,MAAM,0BACN,UAAU,0BACV,QAAS,IAAMO,EAA2B,EAC1C,SAAU,CAACjC,EAAO,QAAQ,YAC9B,EACCoC,GAAyBxB,MAACgB,GAAkB,KAAKU,CAAW,GAC5DD,GAA2BzB,MAACQ,GAAoB,QAAQsB,CAAqB,IAClF,GACJ,CACJ,SAECG,EAAM,KAAN,CAAW,KAAI,GACZ,SAACjC,MAAA,OAAI,UAAWkC,EAAO,WAAY,wBAAyB,CAAE,OAAQJ,CAAA,CAAuB,GACjG,EAEC,CAAC,CAACtC,EAAa,UAAU,QACtBQ,EAAA,IAACiC,EAAM,KAAN,CACG,gBAACA,EAAM,YAAU,GAAC,KAAI,GAAC,OAAQ,CAAE,YAAa,CAC1C,YAAAjC,EAAA,IAAC,OAAK,WAAWkC,EAAO,kBAAmB,SAAU,eACpD1C,EAAa,UAAU,IAAI,CAAC,EAAGE,IAAM,CAC5B,MAAAI,EAAOpB,GAAoB,CAAC,EAClC,aACK,IAAU,WAAWwD,EAAO,SAAU,MAAO,EAAG,QAAS,IAAM5C,EAAkBQ,CAAI,EACjF,SAAG,KAAEJ,CAAC,KAAK,CAAC,IADTA,CAER,EAEP,GACL,CACJ,GAGH,CAAC,CAACiC,GAAmB,QAAUJ,GAAyBD,GACpDtB,EAAA,IAAAiC,EAAM,KAAN,CACG,SAACD,OAAAC,EAAA,CAAM,WAAU,GAAC,KAAI,GAAC,UAAW,GAAKzC,EAAa,UAAU,OAAS0C,EAAO,sBAAwB,EAAE,GAAI,OAAQ,CAAE,YAAa,CAC/H,YAAAlC,EAAA,IAAC,OAAK,WAAWkC,EAAO,0BAA2B,SAAoB,yBACtEP,EAAkB,IAAI,CAAC,EAAGjC,IAElBM,MAAA,KAAU,UAAWkC,EAAO,iBAAkB,MAAO,EAAG,QAAS,IAAMZ,EAA0B,CAAC,EAC9F,SAAG,IAAC,IADD5B,CAER,CAEP,GACL,CACJ,EAER,GAER,ECtGayC,GAAgB,IAAM,CAC/B,MAAMC,EAAiBC,GAAU,CAC7B,KAAM,CAAE,QAAS,CAAE,EACnB,GAAI,CAAE,QAAS,CAAE,EACpB,EAED,OACKrC,MAAAsC,GAAS,IAAT,CAAa,MAAO,CAAE,GAAGF,GACtB,gBAACH,EAAM,WAAWC,EAAO,gBAAiB,cAAc,gBACpD,UAAAlC,EAAA,IAACC,GAAW,IACZD,MAACiC,EAAM,KAAN,CAAW,KAAI,GACZ,SAACD,EAAA,UAAE,UAAWE,EAAO,WAAY,8BAE5BlC,MAAA,QAAK,UAAWkC,EAAO,WAAa,IACzC,CACJ,GACJ,EACJ,EAER,ECfaK,GAAc,CAAC,CAAE,MAAA/E,EAAO,QAAAgF,YAE5BP,EAAM,WAAWC,EAAO,gBAAiB,cAAc,gBACpD,UAAAlC,MAACyC,IAAqB,cAAY,OAAO,aAAW,aAAa,YAAY,MAAM,EAElFzC,EAAA,IAAAiC,EAAM,KAAN,CAAW,KAAI,GACZ,SAACjC,EAAA,SAAE,UAAWkC,EAAO,WAAa,SAAA1E,CAAM,GAC5C,EAEAwC,MAAC0C,IAAc,UAAWR,EAAO,YAAa,QAASM,EAAS,KAAK,QAAQ,CACjF,oNCXFG,GAAqB,OAAe,mBAAsB,OAAe,wBAC/E,IAAIC,EAUO,KACX,GAAI,CACAA,EAAoB,IAAID,GACpBC,GAAqB,OACrBA,EAAkB,KAAO,QACzBA,EAAkB,eAAiB,GAE3C,MAAc,CACV,QAAQ,MAAM,iCAAiC,EAC3BA,EAAA,IACxB,CAEO,MAAMC,GAAc,CAAC,CAAE,eAAAC,KAA4B,CACtD,KAAM,CAACC,EAAaC,CAAc,EAAIrC,WAAkB,EAAK,EAEvDsC,EAAiB,IAAM,CACzB,GAAIL,GAAqB,KAAM,CAC3B,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CAEkBA,EAAA,SAAYM,GAAmE,CAC7F,IAAIC,EAAQ,GACD,UAAAC,KAAUF,EAAM,QACdC,GAAAC,EAAO,CAAC,EAAE,WAEvBN,EAAeK,CAAK,GAExBP,EAAkB,MAAQ,IAAM,CAE5BI,EAAe,EAAK,GAENJ,EAAA,QAAWM,GAA6B,CAClDN,IACAA,EAAkB,KAAK,EACnBM,EAAM,OAAS,YACf,MAAM,gFAAgF,EAC/EA,EAAM,OAAS,yBACtB,MACI,sCAAsCA,EAAM,KAAK,iJAG/C,4CAAsCA,EAAM,KAAK,GAAG,EAElE,EAGJF,EAAe,EAAI,EACnBJ,EAAkB,MAAM,GAGtBS,EAAgB,IAAM,CACxB,GAAIT,GAAqB,KAAM,CAC3B,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CACAA,EAAkB,KAAK,EACvBI,EAAe,EAAK,GAGxB,OAAIJ,GAAqB,KACZ5C,EAAA,IAAAsD,WAAA,IAIJtB,EAAA,KAAAsB,WAAA,WAAC,CAAAP,GACG/C,MAAA,OAAI,UAAWkC,GAAO,8BACnB,SAAClC,EAAA,IAAAuD,GAAA,CAAQ,QAAQ,0BAA0B,aAAa,QACpD,eAACC,EAAO,MAAK,QAAQ,KAAOxD,EAAA,IAAAyD,GAAA,CAAY,YAAY,wBAAyB,GAAI,QAASR,CAAgB,EAC9G,GACJ,EAEHF,GACG/C,EAAA,IAAC,MAAI,WAAWkC,GAAO,8BACnB,SAAClC,EAAA,IAAAuD,GAAA,CAAQ,QAAQ,0BAA0B,aAAa,QACpD,SAACvD,EAAA,IAAAwD,EAAA,CAAO,KAAK,QAAQ,KAAMxD,MAACyD,GAAY,aAAY,sBAAuB,GAAI,SAAU,CAACV,EAAa,QAASM,CAAe,EACnI,GACJ,CAER,GAER,EC5FaK,GAAeC,gBAAc,CACtC,SAAU,GACV,YAAcC,GAAe,CAAC,CAClC,CAAC,ECQYC,GAAgB,CAAC,CAAE,OAAAC,EAAQ,SAAAC,EAAU,YAAAC,EAAa,YAAAC,EAAa,aAAAC,EAAc,gBAAAC,KAA6B,CACnH,KAAM,CAACC,EAAUC,CAAW,EAAI1D,WAAiB,EAAE,EAC7C,CAAE,SAAA2D,CAAA,EAAaC,EAAA,WAAWb,EAAY,EAE5Cc,YAAU,IAAM,CACZN,GAAgBG,EAAYH,CAAY,GACzC,CAACA,CAAY,CAAC,EAEjB,MAAMO,EAAe,IAAM,CACnBV,GAAY,CAACK,EAAS,SAI1BN,EAAOM,CAAQ,EAEXH,GACAI,EAAY,EAAE,EAClB,EAGEK,EAAgBC,GAAqC,CACnDA,EAAG,MAAQ,SAAW,CAACA,EAAG,WAC1BA,EAAG,eAAe,EACLF,IACjB,EAGEG,EAAmB,CAACC,EAA8DC,IAAsB,CACrGA,EAEMA,EAAS,QAAU,KAC1BT,EAAYS,CAAQ,EAFpBT,EAAY,EAAE,CAGlB,EAGEU,EAA+B3I,IAAgB,CAACkI,EAChDU,EAAuBjB,GAAY,CAACK,EAAS,QAAUhI,GAE7D,OAAI2I,IACcf,EAAA,sCAIb/B,EAAM,YAAU,GAAC,UAAWC,GAAO,uBAChC,UAAAlC,EAAA,IAACiF,EAAA,CACG,UAAW/C,GAAO,sBAClB,SAAU6C,EACV,YAAAf,EACA,UAAS,GACT,UAAW,GACX,WAAU,GACV,MAAOI,EACP,SAAUQ,EACV,UAAWF,CAAA,CACf,EACA1E,EAAA,IAAC,MAAI,WAAWkC,GAAO,8BACnB,SAAClC,MAAAuD,GAAA,CAAQ,QAAQ,kBAAkB,aAAa,QAC5C,SAACvD,MAAAwD,EAAA,CAAO,KAAK,QAAQ,KAAOxD,EAAA,IAAAkF,GAAA,CAAa,YAAY,wBAAyB,GAAI,SAAUF,EAAsB,QAASP,CAAc,EAC7I,GACJ,EACCN,GAAmBnE,MAAC6C,GAAY,gBAAgBwB,CAAa,EAClE,GAER,mIC3Eac,GAAU,CAAC,CAAE,KAAA3G,EAAM,MAAA4G,EAAO,QAAAC,WAE9B,MAAI,WAAWnD,GAAO,QAAS,QAAS,IAAMmD,EAAQD,CAAK,EACxD,eAAC,IAAE,WAAWlD,GAAO,YAAc,WAAK,CAC5C,GCRFoD,GAA6B,CAC9B,gDACD,gEACA,qCACJ,EAEMC,GAA2B,CAC7B,qEACA,gEACA,qCACJ,EAOaC,GAAc,CAAC,CAAE,iBAAAC,EAAkB,SAAAC,KAExC1F,MAAC,KAAG,WAAWkC,GAAO,gBAChB,YAAWqD,GAAiBD,IAAkB,IAAI,CAAClB,EAAU1E,UAC1D,KACG,UAAAM,MAACmF,GAAQ,MAAMf,EAAU,MAAOA,EAAU,QAASqB,CAAkB,IADhE/F,CAET,CACH,CACL,+ECvBKiG,GAAkB,CAAC,CAAE,QAAAC,KAE1B5F,MAAC,MAAI,WAAWkC,GAAO,UACnB,SAAClC,EAAA,WAAI,UAAWkC,GAAO,QAAU,SAAA0D,CAAA,CAAQ,CAC7C,GCPFC,GAA4B,CAC9B,YAAa,EACb,SAAU,GACd,EAEMC,GAAiD,CAAE,KAAM,CAAE,QAAS,EAAK,GACzEC,GAA2C,CAAE,KAAM,CAAE,aAAc,EAAK,GACxEC,GAAY,CAAE,SAAU,QASjBC,EAAeC,GAA0C,CAC5D,MAACC,EAAkB,CAAE,OAAQC,EAAwB,EAAIC,GAAW,EAAK,EACzEC,EAAwBC,EAAM,aAAa,EAC3CC,EAAuBD,EAAM,YAAY,EAE/C,OAEQvE,EAAA,KAAAsB,WAAA,WAAAtB,OAACC,GAAM,WAAU,GAAC,cAAc,SAAS,OAAQ4D,GAC7C,UAAC7F,MAAA,SAAM,GAAIkG,EAAM,QAAS,QAASA,EAAM,QACpC,WAAM,KACX,GACClG,MAAAc,EAAA,CAAW,GAAI0F,EAAc,UAAAR,GAAsB,MAAM,OAAO,UAAU,OAAO,QAASI,EAAwB,OAAQL,EAAkB,IACjJ,EACCI,SACIM,GAAQ,QAAQ,IAAMD,EAAc,gBAAe,GAAC,UAAWJ,EAAwB,gBAAiBE,EAAe,KAAK,cACzH,SAACtE,EAAA,KAAAC,EAAA,CAAM,OAAQ4D,GAAa,gBAAgB,QAAQ,OAAQC,GACxD,UAAA9F,EAAA,IAAC,OAAK,IAAIsG,EAAgB,SAAAJ,EAAM,SAAS,EACxClG,EAAA,IAAA0G,GAAA,CAAc,QAASN,EAAwB,SAAK,WACzD,CACJ,EAER,GAER,yQCnCO,SAASO,GAA2B1J,EAA2C,CAG5E,MAAA2J,EAAQ3J,EAAK,MAAM,IAAI,EACvB4J,EAAQD,EAAM,CAAC,EACfE,EAAU/E,GAAU,SAAS6E,EAAM,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,EAErD,OACH,MAAAC,EACA,QAAAC,CAAA,CAER,qWCVaC,GAAoB,CAAC,CAAE,kBAAAC,KAA+B,CAC/D,MAAMC,EAAY,MAAM,QAAQD,CAAiB,EAAIA,EAAoBA,EAAkB,KACrFE,EAAc,MAAM,QAAQF,CAAiB,EAAgC,GAA5BA,GAAmB,OAC1E,OACKhF,OAAA,MAAG,UAAWE,GAAO,yBACjB,UAAU+E,EAAA,IAAI,CAACE,EAAGC,IAAQ,CACjB,MAAAC,EAASV,GAA2BQ,CAAC,EAC3C,OACKnF,OAAA,MAAG,UAAWE,GAAO,sBAClB,UAAAlC,MAAC,KAAG,WAAWkC,GAAO,4BAA8B,WAAO,MAAM,EACjElC,MAAC,IAAE,WAAWkC,GAAO,0BAA2B,wBAAyB,CAAE,OAAQmF,EAAO,OAAW,MAFvDD,CAGlD,EAEP,EACAF,GAAY,IAAI,CAACI,EAAKF,IACZpH,MAAC,OAAI,UAAWkC,GAAO,2BAA4B,IAAKoF,EAAI,KAAUF,CAAK,CACrF,CACL,GAER,EC3BY,IAAAG,OACRA,EAAA,kBAAoB,iBACpBA,EAAA,qBAAuB,oBACvBA,EAAA,YAAc,WAHNA,OAAA,ICWL,MAAMC,GAAiB,CAAC,CAAE,SAAAC,KAEzBzH,MAAC,MAAG,UAAWkC,EAAO,MACjB,SAASuF,EAAA,IAAI,CAACC,EAAGN,IAETpF,OAAA,MAAG,UAAWE,EAAO,UAClB,UAAAlC,MAAC,MAAI,WAAWkC,EAAO,MAAQ,WAAE,MAAM,EACvClC,MAACiC,EAAM,YAAU,GAAC,OAAQ,CAAE,YAAa,CACpC,WAAAyF,EAAE,QACE,OAAO,KAAKA,EAAE,KAAK,GAAK,IAAI,IAAKC,GAC7B3F,OAAA,QAAK,UAAWE,EAAO,MACnB,UAAAyF,EAAE,KAAG,KAAK,UAAUD,EAAE,QAAQC,CAAC,CAAC,EACrC,EACH,CACT,GACC,MAAM,QAAQD,EAAE,WAAW,QACvBE,GAAkB,UAAS,OAAO,cAAa,GAAC,UAAW1F,EAAO,WAC9D,cAAK,UAAUwF,EAAE,YAAa,KAAM,CAAC,EAC1C,EAEA1H,MAAC,MAAK,UAAA0H,EAAE,WAAY,KAfUN,CAiBtC,CAEP,CACL,0MC3BKS,GAAgD,CAAC,CAAE,IAAAC,KAAU,CACtE,KAAM,CAAChB,EAASiB,CAAU,EAAIpH,WAAiB,EAAE,EAC3C,CAACqH,EAAWC,CAAY,EAAItH,WAAkB,EAAI,EAClD,CAACnD,EAAO0K,CAAQ,EAAIvH,WAAuB,IAAI,EAM/CwH,EAAqBC,GAAiB,CACxC,MAAMC,EAAkB,qDACjB,OAAAD,EAAK,QAAQC,EAAiB,EAAE,GAG3C7D,mBAAU,IAAM,EACU,SAAY,CAC1B,IACM,MAAAxI,EAAW,MAAM,MAAM8L,CAAG,EAE5B,IAAC9L,EAAS,GACJ,UAAI,MAAM,+BAA+B,EAG7C,MAAAsM,EAAe,MAAMtM,EAAS,OAC9BuM,EAAa,MAAMC,GAAO,MAAMF,CAAY,EAC5CG,EAAcN,EAAkBI,CAAU,EAChDR,EAAWU,CAAW,QACjBjL,EAAY,CACjB0K,EAAS1K,CAAK,SAChB,CACEyK,EAAa,EAAK,CACtB,KAGU,EACf,CAACH,CAAG,CAAC,QAGH,MACI,UAAAE,EACIhI,MAAA,OAAI,UAAW,GAAGkC,EAAO,OAAO,IAAIA,EAAO,cAAc,GACtD,eAACwG,GAAQ,MAAMC,GAAY,MAAO,MAAM,cAAe,GAC3D,EACAnL,EACAwC,MAAC,OAAI,UAAW,GAAGkC,EAAO,KAAK,IAAIA,EAAO,cAAc,GACpD,SAACF,EAAA,KAAA4G,GAAA,CAAW,eAAgBC,GAAe,MAAO,YAAa,GAC1D,UAAMrL,EAAA,cACNsL,GAAK,MAAMhB,EAAK,SAAQ,GAAC,SAE1B,qBACJ,IACJ,EAEA9F,EAAA,KAAC,MACG,WAAAhC,EAAA,IAACc,EAAA,CACG,UAAWoB,EAAO,eAClB,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,MAAO,EAC9B,MAAM,OACN,UAAU,OACV,KAAM4F,EACN,SAAQ,GACZ,EACC9H,EAAA,WAAI,UAAW,GAAGkC,EAAO,QAAQ,IAAIA,EAAO,cAAc,GAAI,wBAAyB,CAAE,OAAQ4E,GAAW,EACjH,EAER,EAER,ECtDMiC,GAAyB,CAAE,SAAU,GAAM,MAAO,CAAE,MAAO,SAEpDC,GAAgB,CAAC,CAAE,OAAA5J,EAAQ,UAAA6J,EAAW,eAAAC,EAAgB,eAAAC,EAAgB,UAAAC,EAAW,mBAAAC,KAAgC,CACpH,MAAAC,EAAuC,CAAClK,EAAO,QAAQ,SACvDmK,EAA0C,CAACnK,EAAO,QAAQ,YAC1DoK,EAAiC,CAACN,EAClC,CAACvK,EAAU8K,CAAW,EAAI9I,WAAS,EAAE,EAErCrD,EAAoBoM,KAAU,SAE9BC,EAAgB,SAAY,CAC9B,MAAMzM,EAAQI,EAAS,MAAMC,GAASD,CAAM,EAAI,OAChD,GAAI4L,EAAgB,CAGV,MAAAU,EAAeV,EAAe,QAAQ,GAAG,EAAIA,EAAe,MAAM,GAAG,EAAE,CAAC,EAAI,GAK5EW,EAAkB,MAJP,MAAM,MAAMX,EAAgB,CACzC,OAAQ,MACR,QAAS,MAAMrL,EAAWX,CAAK,EAClC,GACsC,OACnC,IAAA4M,EAAoB,IAAI,gBAAgBD,CAAe,EAEvDD,IACAE,GAAqB,IAAMF,GAE/BH,EAAYK,CAAiB,CACjC,GAEJtF,YAAU,IAAM,CACEmF,GAClB,EAAG,CAAE,GAEL,MAAMI,EAAmB,IAAM,CAC3B,GAAI,CAACb,EACM,YAIX,OADsBA,EAAe,MAAM,GAAG,EAAE,OAAO,cAChC,CACnB,IAAK,MACM,OAAAlJ,MAAC,OAAI,IAAKrB,EAAU,UAAWuD,EAAO,YAAa,IAAI,gBAAiB,GACnF,IAAK,KACM,OAAAlC,EAAA,IAAC6H,GAAe,KAAKqB,CAAgB,GAChD,QACW,OAAAlJ,MAAC,UAAO,MAAM,WAAW,IAAKrB,EAAU,MAAM,OAAO,OAAQwK,CAAgB,EAC5F,GAIA,OAAAnH,EAAA,KAACgI,GAAA,CACG,UAAAZ,EACA,YAAaH,EACb,YAA0BgB,MAAaZ,EAAmBY,EAAU,MAAM,OAA6B,EAEvG,UAAAjK,EAAA,IAACkK,GAAA,CACG,QAAS3C,EAAkB,kBAC3B,WAAW,kBACX,kBAAmB+B,EAA8BP,GAAyB,OAE1E,eAACvB,GAAe,UAAUpI,EAAO,QAAQ,UAAY,GAAI,EAC7D,EACAY,EAAA,IAACkK,GAAA,CACG,QAAS3C,EAAkB,qBAC3B,WAAW,qBACX,kBAAmBgC,EAAiCR,GAAyB,OAE7E,SAAC/I,EAAA,IAAA+G,GAAA,CAAkB,kBAAmB3H,EAAO,QAAQ,YAAa,EACtE,EACAY,EAAA,IAACkK,GAAA,CACG,QAAS3C,EAAkB,YAC3B,WAAW,WACX,kBAAmBiC,EAAwBT,GAAyB,OAEnE,SAAiBgB,EAAA,EACtB,IAGZ,4CC3FaI,GAAiB,CAAC,CAAE,UAAAf,EAAW,QAAA/D,WAEnC,MAAI,WAAW,GAAGnD,GAAO,SAAS,IAAIkH,GAAa,EAAE,GAClD,SAAApJ,EAAA,IAACwD,GAAO,KAAMxD,MAACoK,KAAkB,EAAI,QAAA/E,EAChC,6BACL,EACJ,6CCLKgF,GAAkB,CAAC,CAAE,UAAAjB,EAAW,SAAArF,EAAU,QAAAsB,WAE9C,MAAI,WAAW,GAAGnD,GAAO,SAAS,IAAIkH,GAAa,EAAE,GAClD,SAACpJ,MAAAwD,EAAA,CAAO,KAAOxD,EAAA,IAAAsK,GAAA,CAAgB,GAAI,SAAAvG,EAAoB,QAAAsB,EAClD,qBACL,EACJ,uICFKkF,GAA8B,CAAC,CAAE,UAAAnB,EAAW,SAAArF,KAAsB,CAE3E,KAAM,CAACoC,EAAkBqE,CAAmB,EAAI7J,WAAkB,EAAK,EACjE,CAAC8J,EAAaC,CAAc,EAAI/J,WAAkB,EAAK,EACvD,CAACqH,EAAWC,CAAY,EAAItH,WAAkB,EAAI,EAClD,CAACgK,EAAgBC,CAAiB,EAAIjK,EAAA,SAAkE,CAAE,GAC1G,CAACkK,EAAcC,CAAe,EAAInK,EAA4B,WAC9D,CAACoK,EAAmBC,CAAoB,EAAIrK,EAAiB,WAC7D,CAACsK,EAAeC,CAAgB,EAAIvK,EAAA,SAAmB,CAAE,GAMzDrD,EAASoM,GAAU,WAGnByB,EAAoB,SAAY,CAClCX,EAAoB,CAACrE,CAAgB,EAGjC,IACM,MAAArI,EAAU,MAAMP,GAASD,CAAM,EACrC,GAAI,CAACQ,EACK,UAAI,MAAM,mCAAmC,EAEvDsN,EAAkBtN,CAAO,QACpBN,EAAO,CACZ,QAAQ,MAAMA,CAAK,EACnByK,EAAa,EAAK,CACtB,GAGEmD,EAAoB,MAAOtN,GAAoB,CAC5BiB,GAAAjB,CAAO,EAAE,KAAcuN,GAAA,CACxCpD,EAAa,EAAK,EAClB2C,EAAkB,CAAE,GACpBM,EAAiBG,CAAK,EACzB,GAGCC,GAAmB,MAAOxM,GAAqB,CACjD8L,EAAkB,CAAE,GAAGD,EAAgB,CAAC7L,CAAQ,EAAG,SAAW,GAE1D,IACM,MAAAhB,EAAU,MAAMP,GAASD,CAAM,EACrC,GAAI,CAACQ,EACK,UAAI,MAAM,mCAAmC,EAGjD,MAAAe,GAAsBC,EAAUhB,CAAO,EAC7C8M,EAAkB,CAAE,GAAGD,EAAgB,CAAC7L,CAAQ,EAAG,SAAW,GAC9DsM,EAAkBtN,CAAO,QACpBN,EAAO,CACZoN,EAAkB,CAAE,GAAGD,EAAgB,CAAC7L,CAAQ,EAAG,OAAS,GAC5D,QAAQ,MAAMtB,CAAK,CACvB,GAIE+N,GAAmB,MAAOC,GAAqC,CAE7D,GADJA,EAAE,eAAe,EACb,CAACA,EAAE,OAAO,OAASA,EAAE,OAAO,MAAM,SAAW,EAC7C,OAEJd,EAAe,EAAI,EACnB,MAAMe,EAAaD,EAAE,OAAO,MAAM,CAAC,EAC7BE,GAAW,IAAI,SACZA,GAAA,OAAO,OAAQD,CAAI,EAExB,IACM,MAAA3N,EAAU,MAAMP,GAASD,CAAM,EACrC,GAAI,CAACQ,EACK,UAAI,MAAM,mCAAmC,EAEvD,MAAM9B,GAA8B,MAAM4C,GAAc8M,GAAU5N,CAAO,EACzEgN,EAAgB9O,EAAQ,EACxB0O,EAAe,EAAK,EACpBM,EAAqB,MAAS,EAC9BI,EAAkBtN,CAAO,QACpBN,EAAO,CACZ,QAAQ,MAAMA,CAAK,EACnBkN,EAAe,EAAK,EACpBM,EAAqB,2DAA2D,CACpF,GAIA,OAAAhL,MAAC,MAAI,WAAW,GAAGkC,GAAO,SAAS,IAAIkH,GAAa,EAAE,GAClD,SAAApH,OAAC,MACG,WAAChC,EAAA,IAAAwD,EAAA,CAAO,GAAG,gBAAgB,KAAMxD,MAAC2L,KAAa,EAAI,SAAA5H,EAAoB,QAASoH,EAAmB,SAEnG,wBAEChF,GACGnE,EAAA,KAACyE,GAAA,CACG,KAAK,SACL,SAAU,EACV,UAAWvE,GAAO,QAClB,OAAO,iBACP,UAAW,IAAMsI,EAAoB,EAAK,EAC1C,gBAAe,GAEf,UAAAxK,MAAC,OAAK,SAAQ,sBACV,SAAAgC,EAAA,KAAC,MACG,WAAAhC,MAAC4L,IAAM,SAAY,iBACnB5L,EAAA,IAAC,SACG,OAAO,4FACP,UAAWkC,GAAO,YAClB,KAAK,OACL,SAAUqJ,EAAA,CACd,GACJ,CACJ,GAGCd,GAAgBzK,MAAA6L,GAAA,CAAM,SAAqB,uBAC3C,CAACpB,GAAeM,GAAqB/K,EAAA,IAAC6L,IAAM,SAAkBd,EAAA,EAC9D,CAACN,GAAeI,GAAiB7K,MAAA6L,GAAA,CAAM,WAAa,QAAQ,EAG7D7L,MAAC,MAAG,SAA0B,+BAE7BgI,GAAchI,MAAA6L,GAAA,CAAK,SAAU,eAC7B,CAAC7D,GAAaiD,EAAc,SAAW,GAAKjL,EAAA,IAAC6L,IAAK,SAAqB,0BACvEZ,EAAc,IAAI,CAACnM,EAAUc,IAErBoC,OAAA,OAAgB,UAAWE,GAAO,KAC/B,UAAAlC,EAAA,IAAC,MAAI,WAAWkC,GAAO,KAAO,SAASpD,EAAA,EAEvCkD,EAAA,KAACwB,EAAA,CACG,WAAO8G,GAAgB,IACvB,QAAS,IAAMgB,GAAiBxM,CAAQ,EACxC,SAAU6L,EAAe7L,CAAQ,IAAM,WAAa6L,EAAe7L,CAAQ,IAAM,UAEhF,UAAC,CAAA6L,EAAe7L,CAAQ,GAAK,cAC7B6L,EAAe7L,CAAQ,GAAK,WAAa,mBACzC6L,EAAe7L,CAAQ,GAAK,SAAW,kBACvC6L,EAAe7L,CAAQ,GAAK,WAAa,gBAC9C,IAZMc,CAaV,CAEP,GACL,EAER,EACJ,EAER,4CCjKakM,EAAc,CACvB,eACI,yLACJ,YACI,kKACJ,KAAM,oGACN,YACI,0KACJ,cACI,2MACJ,eACI,sMACJ,gBAAiB,iHACjB,oBAAqB,sIACrB,oBACI,qKACJ,yBAA0B,yEAC1B,cAAe,8FACf,aACI,wJACJ,iBACI,iKACJ,cACI,oPACJ,WAAY,uEACZ,qBAAsB,+DACtB,wBAAyB,iEAC7B,ECbaC,GAAiB,CAAC,CAAE,oBAAAC,EAAqB,mBAAAC,EAAoB,iBAAAC,EAAkB,qBAAAC,KAAkC,CAC1H,KAAM,CAACC,EAAeC,CAAgB,EAAI1L,WAAwB3B,EAAc,MAAM,EAChF,CAACsN,EAAmBC,CAAoB,EAAI5L,WAA6BzB,EAAmB,IAAI,EAEhGsN,EAAwB,CAAC3H,EAAsC4H,IAAwD,CACxGJ,EAAAI,GAAQ,MAAQzN,EAAc,MAAM,EACjCgN,EAAAS,GAAQ,MAAQzN,EAAc,MAAM,GAGtD0N,EAAuB,CAAC7H,EAAsC4H,IAAwD,CACxHF,EAAqBE,GAAQ,GAAyB,EACnCR,EAAA,CAACQ,GAAQ,GAAyB,CAAC,GAG1DjI,YAAU,IAAM,CAENyH,EADNC,EACyB,CAAChN,EAAmB,UAAWA,EAAmB,cAAc,EAChE,CAACA,EAAmB,SAAS,CADoC,CACnC,EACxD,CAACgN,CAAgB,CAAC,EAEf,MAAAS,EAAkBpG,EAAM,eAAe,EACvCqG,EAAuBrG,EAAM,oBAAoB,EACjDsG,EAAiBtG,EAAM,cAAc,EACrCuG,EAAsBvG,EAAM,mBAAmB,EAGjD,OAAAvE,OAACC,GAAM,UAAWC,GAAO,UAAW,OAAQ,CAAE,YAAa,IACvD,UAAAlC,EAAA,IAAC+M,GAAA,CACG,GAAIH,EACJ,MAAM,iBACN,YAAaT,EAAqB,SAAS,EAC3C,QAAS,CACL,CAAE,IAAK,SAAU,KAAM,0BAA2B,SAAUC,GAAiBpN,EAAc,OAAQ,KAAMA,EAAc,MAAO,EAC9H,CAAE,IAAK,UAAW,KAAM,UAAW,SAAUoN,GAAiBpN,EAAc,QAAS,KAAMA,EAAc,OAAQ,EACjH,CAAE,IAAK,OAAQ,KAAM,OAAQ,SAAUoN,GAAiBpN,EAAc,KAAM,KAAMA,EAAc,IAAK,CACzG,EACA,SAAQ,GACR,SAAUwN,EACV,kBAAiBG,EACjB,cAAgBzG,GACZlG,MAACiG,GAAY,QAAS0G,EAAiB,QAASC,EAAsB,SAAUd,EAAY,cAAe,MAAO5F,GAAO,MAAO,EAExI,EAECgG,GAAoB,CAAClN,EAAc,QAASA,EAAc,MAAM,EAAE,SAASoN,CAAa,GACrFpM,EAAA,IAAC+M,GAAA,CACG,GAAID,EACJ,MAAM,4CACN,QAAS,CACL,CAAE,IAAK5N,EAAmB,UAAW,KAAM,kBAAmB,SAAUoN,IAAsBpN,EAAmB,SAAU,EAC3H,CAAE,IAAKA,EAAmB,eAAgB,KAAM,mBAAoB,SAAUoN,IAAsBpN,EAAmB,cAAe,EACtI,CAAE,IAAKA,EAAmB,KAAM,KAAM,4BAA6B,SAAUoN,IAAsBpN,EAAmB,IAAK,CAC/H,EACA,SAAUwN,EACV,kBAAiBG,EACjB,cAAgB3G,GACZlG,MAACiG,GAAY,QAAS4G,EAAgB,QAASC,EAAqB,SAAUhB,EAAY,aAAc,MAAO5F,GAAO,MAAO,EAErI,CAER,GAER,EC1Da8G,GAAqB,IAAM,CAC9B,MAAE,SAAAC,GAAavD,KACCuD,EAAS,iBAAiB,EAChD,KAAM,CAACC,EAAQC,CAAS,EAAIxM,WAA8C,MAAS,EAEnF6D,YAAU,IAAM,EACQ,SAAY,CAClB2I,EAAA,MAAMxP,GAAesP,CAAQ,CAAC,KAIhD,EAAG,CAAE,GAEC,MAAAG,EAAYC,GACV,OAAOA,GAAM,SACNA,EAEA,KAAK,UAAUA,CAAC,EAkBzBC,GAdcC,GACT,OAAO,KAAKA,GAAK,CAAE,GAAE,IAAKC,GAAgB,CAC7C,IAAIC,EAAcD,EACd,IAGA,MAAM5G,EADM,IAAI,IAAI4G,CAAG,EACL,SAAS,MAAM,GAAG,EAC9BA,EAAA5G,EAAMA,EAAM,OAAS,CAAC,OAChB,CAEhB,CACO,OAAE,KAAM4G,EAAK,MAAOJ,GAAUG,GAAK,CAAC,GAAGE,CAAW,CAAC,EAAE,CAC/D,GAE+BP,CAAM,EAEpCQ,EAA0C,CAC5CC,GAAyB,CACrB,SAAU,OACV,QAAS,CAACN,EAAUO,IACTP,EAAE,KAAK,cAAcO,EAAE,IAAI,EAEtC,iBAAkB,IACP,OAEX,WAAoB3Q,GACTA,EAAK,IAChB,CACH,EACD0Q,GAAyB,CACrB,SAAU,QACV,QAAS,CAACN,EAAUO,IACTP,EAAE,MAAM,cAAcO,EAAE,KAAK,EAExC,iBAAkB,IACP,QAEX,WAAoB3Q,GACTA,EAAK,KAChB,CACH,GAGL,cACK,MACG,WAAA+C,MAAC4L,IAAM,SAAe,oBACtB5J,OAAC6L,IAAS,MAAAP,EAAc,QAAAI,EAAkB,SAAQ,GAAC,SAAkBzQ,KAAK,KACtE,UAAA+C,EAAA,IAAC8N,GACG,UAAA9N,EAAA,IAAC+N,GAAa,WAAC,CAAE,iBAAAC,CAAA,IAAuBhO,MAACiO,GAAoB,UAAAD,GAAmB,EAAsB,GAC1G,EACAhO,MAACkO,IACI,SAAC,EAAE,KAAAjR,EAAM,MAAAkR,CAAM,UAAOJ,GAAgC,WAAC,CAAE,WAAAK,CAAW,UAAOC,GAAc,UAAAD,EAAWnR,CAAI,EAAE,GAA5DkR,CAA4E,EAC/H,GACJ,CACJ,GAER,4CCjFaG,GAAgB,CAAC,CAAE,kBAAAC,EAAmB,eAAAC,EAAgB,WAAAC,EAAY,YAAAC,KAAyB,CACpG,KAAM,CAAChJ,EAAUiJ,CAAW,EAAIhO,WAAkB8N,CAAU,EACtD,CAACnC,EAAmBC,CAAoB,EAAI5L,EAAqB,SAAA+N,GAAezP,EAAW,aAAa,EAExG2P,EAAa,CAAC/J,EAAuDgK,IAAsB,CAC9EL,EAAA,CAAC,CAACK,CAAO,EACZF,EAAA,CAAC,CAACE,CAAO,GAGnBC,EAAkB,CAACjK,EAAsC4H,IAAqD,CAChH,GAAIA,EAAQ,CACR,MAAMsC,EAAOtC,EAAO,IACF8B,EAAAQ,GAAQ9P,EAAW,aAAa,EAClD8P,GAAQxC,EAAqBwC,CAAI,CACrC,GAGJvK,YAAU,IAAM,CACAkB,GAAA6I,EAAkBtP,EAAW,aAAa,GACvD,CAACyG,CAAQ,CAAC,EAEP,MAAAsJ,EAAazI,EAAM,UAAU,EAC7B0I,EAAkB1I,EAAM,eAAe,EACvC2I,EAAe3I,EAAM,YAAY,EACjC4I,EAAoB5I,EAAM,iBAAiB,EAG7C,OAAAvE,OAACC,GAAM,UAAWC,GAAO,UAAW,OAAQ,CAAE,YAAa,IACvD,UAAAlC,EAAA,IAACoP,EAAA,CACG,GAAIH,EACJ,QAASvJ,EACT,MAAM,uBACN,SAAUkJ,EACV,kBAAiBI,EACjB,cAAgB9I,GACZlG,MAACiG,GAAY,QAAS+I,EAAY,QAASC,EAAiB,SAAUnD,EAAY,cAAe,MAAO5F,GAAO,MAAO,EAE9H,EACCR,GACG1F,EAAA,IAAC+M,GAAA,CACG,GAAIoC,EACJ,YAAa7C,EACb,MAAM,0BACN,QAAS,CACL,CACI,IAAKrN,EAAW,cAChB,KAAM,iBACV,EACA,CAAE,KAAM,SAAU,IAAKA,EAAW,MAAO,EACzC,CAAE,KAAM,OAAQ,IAAKA,EAAW,KAAM,CAC1C,EACA,SAAQ,GACR,SAAU6P,EACV,kBAAiBI,EACjB,cAAgBhJ,GACZlG,MAACiG,GAAY,QAASiJ,EAAc,QAASC,EAAmB,SAAUrD,EAAY,iBAAkB,MAAO5F,GAAO,MAAO,EAErI,CAER,GAER,ECxCMmJ,GAAO,IAAM,CACf,KAAM,CAACC,EAAmBC,CAAoB,EAAI5O,WAAS,EAAK,EAC1D,CAAC6O,EAAgBC,CAAiB,EAAI9O,WAAiB,EAAE,EACzD,CAAC+O,EAAaC,CAAc,EAAIhP,WAAiB,EAAG,EACpD,CAACiP,EAAMC,CAAO,EAAIlP,WAAwB,IAAI,EAC9C,CAACmP,EAAsBC,CAAuB,EAAIpP,WAAiB,CAAC,EACpE,CAACqP,EAAoBC,CAAqB,EAAItP,WAAiB,CAAC,EAChE,CAACuP,EAAeC,CAAgB,EAAIxP,WAAiB,CAAC,EACtD,CAACyL,EAAeC,CAAgB,EAAI1L,WAAwB3B,EAAc,MAAM,EAChF,CAACoR,EAAmBC,CAAoB,EAAI1P,WAAkB,EAAI,EAClE,CAACtC,EAAciS,EAAe,EAAI3P,WAAkB,EAAI,EACxD,CAAC4P,GAAqBC,CAAsB,EAAI7P,WAAkB,EAAK,EACvE,CAAC8P,EAAiBC,EAAkB,EAAI/P,WAAiB,EAAE,EAC3D,CAACgQ,EAA6BC,EAA8B,EAAIjQ,WAAkB,EAAK,EACvF,CAACkQ,GAAiBC,EAAkB,EAAInQ,WAA+B,CAACzB,EAAmB,SAAS,CAAC,EACrG,CAAC6R,GAAsBC,EAAuB,EAAIrQ,WAAkB,EAAK,EACzE,CAACsQ,GAAyBC,EAA0B,EAAIvQ,WAAkB,EAAK,EAC/E,CAACwQ,GAAYC,EAAa,EAAIzQ,WAAqB1B,EAAW,aAAa,EAC3E,CAACyG,GAAUiJ,EAAW,EAAIhO,WAAkB,EAAK,EAEjD0Q,EAAkBC,SAAe,EAAE,EACnCC,GAAuBD,SAA8B,IAAI,EAEzD,CAACtJ,GAAWC,EAAY,EAAItH,WAAkB,EAAK,EACnD,CAACtB,GAAamS,EAAc,EAAI7Q,WAAkB,EAAK,EACvD,CAACnD,GAAO0K,EAAQ,EAAIvH,EAAkB,WAEtC,CAACuI,GAAgBuI,EAAiB,EAAI9Q,EAAiB,WACvD,CAAC+Q,GAAwBC,CAAyB,EAAIhR,WAAwC,MAAS,EAEvG,CAACiR,GAAgBC,EAAiB,EAAIlR,WAAiB,CAAC,EACxD,CAACmR,EAASC,EAAU,EAAIpR,EAAA,SAAsD,CAAE,GAChF,CAACqR,GAAiBC,EAAkB,EAAItR,EAAA,SAAsD,CAAE,GAChG,CAACuR,GAAYC,EAAa,EAAIxR,EAAA,SAA4B,CAAE,GAE5D,CAACyR,GAAkBC,EAAmB,EAAI1R,WAAkB,EAAK,EACjE,CAAC2R,GAA0BC,EAA2B,EAAI5R,WAAkB,EAAK,EACjF,CAAC6R,GAAkBC,EAAmB,EAAI9R,WAAkB,EAAK,EACjE,CAAC+R,GAAgBC,EAAiB,EAAIhS,WAAkB,EAAK,EAC7D,CAACwD,GAAiByO,EAAkB,EAAIjS,WAAkB,EAAK,EAC/D,CAACc,GAAyBoR,EAA0B,EAAIlS,WAAkB,EAAK,EAC/E,CAACa,GAAuBsR,EAAwB,EAAInS,WAAkB,EAAK,EAE3EoS,GAAY,SAAY,CAChBhV,GAAA,EAAE,KAAeiV,GAAA,CACvBX,GAAoBW,EAAO,gBAAgB,EAC3C3C,EAAqB2C,EAAO,wBAAwB,EACpDT,GAA4BS,EAAO,wBAAwB,EAC3DP,GAAoBO,EAAO,gBAAgB,EACtCA,EAAO,kBACR3G,EAAiBrN,EAAc,IAAI,EAEvC2T,GAAkBK,EAAO,cAAc,EACvCJ,GAAmBI,EAAO,eAAe,EACzCH,GAA2BG,EAAO,uBAAuB,EACzDF,GAAyBE,EAAO,qBAAqB,EACxD,GAGCC,GAAqB,MAAO7O,EAAkB0N,EAAsCoB,IAAsC,CAC5H,IAAI9T,GAAiB,GACjB+T,EAA+B,GAE7B,MAAAC,EAAeC,GACV,IAAI,QAAmBC,IAAA,CAC1B,WAAW,IAAM,CACHlU,IAAAiU,EACV,MAAME,GAAkC,CACpC,GAAGJ,EACH,QAAS,CAAE,QAAS/T,GAAQ,KAAM+T,EAAY,QAAQ,IAAK,GAE/DlB,GAAmB,CAAC,GAAGH,EAAS,CAAC1N,EAAUmP,EAAc,CAAC,CAAC,EAC3DD,GAAQ,IAAI,GACb,EAAE,EACR,EAED,IACA9B,GAAe,EAAI,EACF,gBAAAtO,KAASsQ,GAAiBN,CAAY,EACnD,GAAIhQ,EAAM,SAAcA,EAAM,QAAW,YAC/BA,EAAA,QAAaA,EAAM,MACXiQ,EAAAjQ,UACPA,EAAM,MAAS,QACtB+E,GAAa,EAAK,EAClB,MAAMmL,EAAYlQ,EAAM,MAAS,OAAU,UACpCA,EAAM,QAEDiQ,EAAA,QAAU,CAAE,GAAGA,EAAY,QAAS,GAAGjQ,EAAM,iBAClDA,EAAM,MACP,YAAMA,EAAM,KAAQ,CAElC,QACF,CACEsO,GAAe,EAAK,CACxB,CAKO,MAJ+B,CAClC,GAAG2B,EACH,QAAS,CAAE,QAAS/T,GAAQ,KAAM+T,EAAY,QAAQ,IAAK,EAExD,EAGL7V,GAAoBoM,KAAU,SAC9B,CAAE,SAAApF,EAAA,EAAaC,EAAA,WAAWb,EAAY,EAEtC+P,GAAiB,MAAOrP,GAAqB,CAC/CiN,EAAgB,QAAUjN,EAE1B5G,IAAS0K,GAAS,MAAS,EAC3BD,GAAa,EAAI,EACjBwJ,GAAkB,MAAS,EAC3BE,EAA0B,MAAS,EAEnC,MAAMzU,EAAQI,GAAS,MAAMC,GAASD,EAAM,EAAI,OAE5C,IAMA,MAAMW,GAA0B,CAC5B,SAAU,CAAC,GANqB6T,EAAQ,QAAazE,GAAA,CACrD,CAAE,QAASA,EAAE,CAAC,EAAG,KAAM,MAAO,EAC9B,CAAE,QAASA,EAAE,CAAC,EAAE,QAAQ,QAAS,KAAM,WAAY,EACtD,EAG2B,CAAE,QAASjJ,EAAU,KAAM,OAAQ,EAC3D,QAAS,CACL,UAAW,CACP,gBAAiBoL,EAAe,SAAW,EAAI,OAAYA,EAC3D,iBAAkBiB,EAAgB,SAAW,EAAI,OAAYA,EAC7D,IAAKP,EACL,YAAAR,EACA,uBAAwBI,EACxB,qBAAsBE,EACtB,eAAgB5D,EAChB,gBAAiBgE,EACjB,kBAAmBG,GACnB,2BAA4BI,EAC5B,wBAAyBI,GACzB,2BAA4BE,GAC5B,cAAeJ,GACf,UAAWnL,GACX,YAAayL,GACb,GAAIvB,IAAS,KAAO,CAAE,KAAAA,GAAe,CAAC,CAC1C,CACJ,EAEA,cAAekC,EAAQ,OAASA,EAAQA,EAAQ,OAAS,CAAC,EAAE,CAAC,EAAE,cAAgB,MAG7E9V,EAAW,MAAMoC,GAAQH,GAASI,EAAcnB,CAAK,EACvD,IAAClB,EAAS,KACV,MAAM,MAAM,kBAAkB,EAElC,GAAIqC,EAAc,CACd,MAAMF,EAAkC,MAAM8U,GAAmB7O,EAAU0N,EAAS9V,EAAS,IAAI,EACjG+V,GAAW,CAAC,GAAGD,EAAS,CAAC1N,EAAUjG,CAAc,CAAC,CAAC,MAChD,CACG,MAAAA,EAAyC,MAAMnC,EAAS,OAC9D,GAAIA,EAAS,OAAS,KAAO,CAACA,EAAS,GAC7B,YAAMmC,EAAe,OAAS,eAAe,EAEvD4T,GAAW,CAAC,GAAGD,EAAS,CAAC1N,EAAUjG,CAAiC,CAAC,CAAC,CAC1E,QACKqN,EAAG,CACRtD,GAASsD,CAAC,SACZ,CACEvD,GAAa,EAAK,CACtB,GAGEyL,GAAY,IAAM,CACpBrC,EAAgB,QAAU,GAC1B7T,IAAS0K,GAAS,MAAS,EAC3BuJ,GAAkB,MAAS,EAC3BE,EAA0B,MAAS,EACnCI,GAAW,CAAE,GACbE,GAAmB,CAAE,GACrBhK,GAAa,EAAK,EAClBuJ,GAAe,EAAK,GAGdhN,YAAA,IAAM+M,GAAqB,SAAS,eAAe,CAAE,SAAU,SAAU,EAAG,CAACvJ,EAAS,CAAC,EACvFxD,YAAA,IAAM+M,GAAqB,SAAS,eAAe,CAAE,SAAU,OAAQ,EAAG,CAACS,EAAe,CAAC,EACrGxN,YAAU,IAAM,CACFuO,IACd,EAAG,CAAE,GAELvO,YAAU,IAAM,CACZ,GAAIsN,GAAWtQ,GAEX,QAAS9B,EAAI,EAAGA,EAAIoS,EAAQ,OAAQpS,IAC3BwS,GAAWxS,CAAC,GACAnB,GAAAuT,EAAQpS,CAAC,EAAE,CAAC,EAAE,QAAQ,OAAO,EAAE,KAAkBgC,GAAA,CAC1DyQ,GAAc,CAAC,GAAGD,GAAW,MAAM,EAAGxS,CAAC,EAAGgC,EAAW,GAAGwQ,GAAW,MAAMxS,EAAI,CAAC,CAAC,CAAC,EACnF,CAGb,EACD,CAACoS,CAAO,CAAC,EAEN,MAAA6B,GAAyB,CAAC9O,EAA+DC,IAAsB,CACjH2K,EAAkB3K,GAAY,EAAE,GAG9B8O,GAAsB,CAAC/O,EAAgDC,IAAsB,CAChF6K,EAAA,WAAW7K,GAAY,GAAG,CAAC,GAGxC+O,GAAe,CAAChP,EAAgDC,IAAsB,CAChF+K,EAAA,SAAS/K,GAAY,EAAE,CAAC,GAG9BgP,GAA6B,CAACjP,EAAgDC,IAAsB,CAChFmL,EAAA,WAAWnL,GAAY,GAAG,CAAC,GAG/CiP,GAA+B,CAAClP,EAAgDC,IAAsB,CAChFiL,EAAA,WAAWjL,GAAY,GAAG,CAAC,GAGjDkP,GAAwB,CAACnP,EAAgDC,IAAsB,CAChFqL,EAAA,SAASrL,GAAY,GAAG,CAAC,GAGxCmP,GAA4B,CAACpP,EAAuDgK,IAAsB,CACvFwB,EAAA,CAAC,CAACxB,CAAO,GAG5BqF,GAA8B,CAACrP,EAAuDgK,IAAsB,CACvF2B,EAAA,CAAC,CAAC3B,CAAO,GAG9BsF,GAAuB,CAACtP,EAAuDgK,IAAsB,CACvFyB,GAAA,CAAC,CAACzB,CAAO,GAGvBuF,GAA2B,CAACvP,EAAuBC,IAAsB,CAC3E4L,GAAmB5L,GAAY,EAAE,GAG/BuP,GAAsC,CAACxP,EAAuDgK,IAAsB,CACvF+B,GAAA,CAAC,CAAC/B,CAAO,GAGtCyF,GAA+B,CAACzP,EAAuDgK,IAAsB,CACvFmC,GAAA,CAAC,CAACnC,CAAO,GAG/B0F,GAAkC,CAAC1P,EAAuDgK,IAAsB,CACvFqC,GAAA,CAAC,CAACrC,CAAO,GAGlCpJ,GAAoB+O,GAAoB,CAC1Cf,GAAee,CAAO,GAGpBC,GAAiB,CAAC9V,EAAkBiB,IAAkB,CACpDsJ,KAAmBvK,GAAY+S,KAA2BnK,EAAkB,aAAeqK,KAAmBhS,EAC9G+R,EAA0B,MAAS,GAEnCF,GAAkB9S,CAAQ,EAC1BgT,EAA0BpK,EAAkB,WAAW,GAG3DsK,GAAkBjS,CAAK,GAGrB8U,GAAc,CAACC,EAAwB/U,IAAkB,CAEvD+R,EADAD,KAA2BiD,GAAO/C,KAAmBhS,EAC3B,OAEA+U,CAFS,EAKvC9C,GAAkBjS,CAAK,GAIrBgV,GAAmBrO,EAAM,gBAAgB,EACzCsO,GAAwBtO,EAAM,qBAAqB,EACnDuO,GAAgBvO,EAAM,aAAa,EACnCwO,GAAqBxO,EAAM,kBAAkB,EAC7CyO,GAASzO,EAAM,MAAM,EACrB0O,GAAc1O,EAAM,WAAW,EAC/B2O,GAAgB3O,EAAM,aAAa,EACnC4O,GAAqB5O,EAAM,kBAAkB,EAC7C6O,GAAkB7O,EAAM,eAAe,EACvC8O,GAAuB9O,EAAM,oBAAoB,EACjD+O,GAAkB/O,EAAM,eAAe,EACvCgP,GAAuBhP,EAAM,oBAAoB,EACjDiP,GAAoBjP,EAAM,iBAAiB,EAC3CkP,GAAyBlP,EAAM,sBAAsB,EACrDmP,GAAmBnP,EAAM,gBAAgB,EACzCoP,GAAwBpP,EAAM,qBAAqB,EACnDqP,GAAqBrP,EAAM,kBAAkB,EAC7CsP,GAA0BtP,EAAM,uBAAuB,EACvDuP,GAA6BvP,EAAM,0BAA0B,EAC7DwP,GAAkCxP,EAAM,+BAA+B,EACvEyP,GAAyBzP,EAAM,sBAAsB,EACrD0P,GAA8B1P,EAAM,2BAA2B,EAC/D2P,GAA4B3P,EAAM,yBAAyB,EAC3D4P,GAAiC5P,EAAM,8BAA8B,EACrE6P,GAAiB7P,EAAM,cAAc,EACrC8P,GAAsB9P,EAAM,mBAAmB,EAErD,OACKvE,OAAA,OAAI,UAAWE,EAAO,UACnB,UAACF,EAAA,YAAI,UAAWE,EAAO,kBACnB,UAAClC,MAAAqK,GAAA,CAAgB,UAAWnI,EAAO,cAAe,QAASwR,GAAW,SAAU,CAACrC,EAAgB,SAAWrJ,EAAW,GACtH0K,UAAmBnI,GAAW,WAAWrI,EAAO,cAAe,SAAU,CAACoC,GAAU,EACrFtE,MAACmK,GAAe,WAAWjI,EAAO,cAAe,QAAS,IAAMqN,EAAqB,CAACD,CAAiB,EAAG,GAC9G,EACCtN,EAAA,YAAI,UAAWE,EAAO,SACnB,UAACF,EAAA,YAAI,UAAWE,EAAO,cAClB,UAACmP,EAAgB,QAQdrP,OAAC,MAAI,WAAWE,EAAO,kBAClB,UAAA7C,IACG2S,GAAgB,IAAI,CAACsE,EAAgB1W,WAChC,MACG,WAAAI,EAAA,IAAC2F,GAAgB,SAAS2Q,EAAe,CAAC,CAAG,GAC5CtW,EAAA,WAAI,UAAWkC,EAAO,eACnB,SAAAlC,EAAA,IAACkB,GAAA,CACG,YAAa,GAEb,OAAQoV,EAAe,CAAC,EACxB,WAAY,GACZ,kBAAmBnP,GAAKsN,GAAetN,EAAGvH,CAAK,EAC/C,wBAAyB,IAAM8U,GAAYnN,EAAkB,kBAAmB3H,CAAK,EACrF,2BAA4B,IAAM8U,GAAYnN,EAAkB,qBAAsB3H,CAAK,EAC3F,0BAAgC2W,GAAA9C,GAAe8C,CAAC,EAChD,sBAAuB5F,GAA+BmB,EAAQ,OAAS,IAAMlS,EAC7E,sBAAA4B,GACA,wBAAAC,GACA,UAAWyQ,GAAWtS,CAAK,GAVtBA,CAAA,EAYb,IAjBMA,CAkBV,CACH,EACJ,CAACP,IACEyS,EAAQ,IAAI,CAAC1S,EAAQQ,WAChB,MACG,WAAAI,EAAA,IAAC2F,GAAgB,SAASvG,EAAO,CAAC,CAAG,GACpCY,EAAA,WAAI,UAAWkC,EAAO,eACnB,SAAAlC,EAAA,IAACkB,GAAA,CACG,YAAa,GAEb,OAAQ9B,EAAO,CAAC,EAChB,WAAYwS,KAAmBhS,GAAS8R,KAA2B,OACnE,kBAAmBvK,GAAKsN,GAAetN,EAAGvH,CAAK,EAC/C,wBAAyB,IAAM8U,GAAYnN,EAAkB,kBAAmB3H,CAAK,EACrF,2BAA4B,IAAM8U,GAAYnN,EAAkB,qBAAsB3H,CAAK,EAC3F,0BAAgC2W,GAAA9C,GAAe8C,CAAC,EAChD,sBAAuB5F,GAA+BmB,EAAQ,OAAS,IAAMlS,EAC7E,sBAAA4B,GACA,wBAAAC,GACA,UAAWyQ,GAAWtS,CAAK,GAVtBA,CAAA,EAYb,IAjBMA,CAkBV,CACH,EACJoI,IAEOhG,EAAA,KAAAsB,WAAA,WAACtD,MAAA2F,GAAA,CAAgB,QAAS0L,EAAgB,OAAS,SAClD,MAAI,WAAWnP,EAAO,uBACnB,SAAAlC,MAACmC,IAAc,GACnB,GACJ,EAEH3E,GAEOwE,EAAA,KAAAsB,WAAA,WAACtD,MAAA2F,GAAA,CAAgB,QAAS0L,EAAgB,OAAS,SAClD,MAAI,WAAWnP,EAAO,uBACnB,eAACK,GAAY,OAAO/E,GAAM,WAAY,QAAS,IAAMiW,GAAepC,EAAgB,OAAO,CAAG,GAClG,GACJ,EACA,KACJrR,MAAC,MAAI,KAAKuR,EAAsB,IACpC,EArEAvP,OAAC,MAAI,WAAWE,EAAO,eACvB,UAAAlC,EAAA,IAAC,KAAG,WAAWkC,EAAO,oBAAqB,SAA0C,+CACpFlC,EAAA,UAAG,UAAWkC,EAAO,uBAAwB,SAAyC,8CAEnFlC,MAACwF,GAAY,kBAAAC,GAAoC,SAAAC,EAAoB,GACzE,GAmEH1F,EAAA,WAAI,UAAWkC,EAAO,UACnB,SAAAlC,EAAA,IAAC6D,GAAA,CACG,YAAW,GACX,YAAY,kEACZ,SAAUmE,GACV,OAAoB5D,GAAAqP,GAAerP,CAAQ,EAC3C,gBAAAD,EAAA,GAER,GACJ,EAEC2N,EAAQ,OAAS,GAAKJ,IACnB1R,EAAA,IAACgJ,GAAA,CACG,UAAW9G,EAAO,kBAClB,eAAAgH,GACA,mBAAoBsN,GAAK9B,GAAY8B,EAAG5E,EAAc,EACtD,eAAe,QACf,OAAQE,EAAQF,EAAc,EAAE,CAAC,EACjC,UAAWF,EAAA,CACf,EAGJ1P,EAAA,KAACyU,GAAA,CACG,WAAW,8BACX,OAAQnH,EACR,WAAY,GACZ,UAAW,IAAMC,EAAqB,EAAK,EAC3C,qBAAqB,QACrB,sBAAuB,IAAOvP,MAAA0G,GAAA,CAAc,QAAS,IAAM6I,EAAqB,EAAK,EAAG,SAAK,UAC7F,iBAAkB,GAElB,UAAAvP,EAAA,IAACiF,EAAA,CACG,GAAI4P,GACJ,UAAW3S,EAAO,sBAClB,aAAcsN,EACd,MAAM,2BACN,UAAS,GACT,iBAAgB,GAChB,SAAUmE,GACV,kBAAiBiB,GACjB,cAAgB1O,GACZlG,EAAA,IAACiG,EAAA,CACG,QAAS2O,GACT,QAASC,GACT,SAAU/I,EAAY,eACtB,MAAO5F,GAAO,MAClB,EAER,EAEAlG,EAAA,IAACiF,EAAA,CACG,GAAI8P,GACJ,UAAW7S,EAAO,sBAClB,MAAM,cACN,KAAK,SACL,IAAK,EACL,IAAK,EACL,KAAM,GACN,aAAcwN,EAAY,SAAS,EACnC,SAAUkE,GACV,kBAAiBkB,GACjB,cAAgB5O,GACZlG,MAACiG,GAAY,QAAS6O,GAAe,QAASC,GAAoB,SAAUjJ,EAAY,YAAa,MAAO5F,GAAO,MAAO,EAElI,EAEAlG,EAAA,IAACiF,EAAA,CACG,GAAIgQ,GACJ,UAAW/S,EAAO,sBAClB,MAAM,OACN,KAAK,OACL,aAAc0N,GAAM,YAAc,GAClC,SAAUiE,GACV,kBAAiBmB,GACjB,cAAgB9O,GACZlG,MAACiG,GAAY,QAAS+O,GAAQ,QAASC,GAAa,SAAUnJ,EAAY,KAAM,MAAO5F,GAAO,MAAO,EAE7G,EAEAlG,EAAA,IAACiF,EAAA,CACG,GAAIkQ,GACJ,UAAWjT,EAAO,sBAClB,MAAM,uBACN,KAAK,SACL,IAAK,EACL,KAAM,IACN,aAAc8N,EAAmB,SAAS,EAC1C,SAAU8D,GACV,kBAAiBoB,GACjB,cAAgBhP,GACZlG,MAACiG,GAAY,QAASiP,GAAe,QAASC,GAAoB,SAAUrJ,EAAY,YAAa,MAAO5F,GAAO,MAAO,EAElI,EAECoM,IACGtS,EAAA,IAACiF,EAAA,CACG,GAAIoQ,GACJ,UAAWnT,EAAO,sBAClB,MAAM,yBACN,KAAK,SACL,IAAK,EACL,IAAK,EACL,KAAM,GACN,aAAc4N,EAAqB,SAAS,EAC5C,SAAUiE,GACV,kBAAiBqB,GACjB,cAAgBlP,GACZlG,EAAA,IAACiG,EAAA,CACG,QAASmP,GACT,QAASC,GACT,SAAUvJ,EAAY,cACtB,MAAO5F,GAAO,MAClB,EAER,EAGJlG,EAAA,IAACiF,EAAA,CACG,GAAIsQ,GACJ,UAAWrT,EAAO,sBAClB,MAAM,qCACN,KAAK,SACL,IAAK,EACL,IAAK,GACL,aAAcgO,EAAc,SAAS,EACrC,SAAU8D,GACV,kBAAiBsB,GACjB,cAAgBpP,GACZlG,MAACiG,GAAY,QAASqP,GAAiB,QAASC,GAAsB,SAAUzJ,EAAY,eAAgB,MAAO5F,GAAO,MAAO,EAEzI,EAEAlG,EAAA,IAACiF,EAAA,CACG,GAAIwQ,GACJ,UAAWvT,EAAO,sBAClB,MAAM,mBACN,aAAcuO,EACd,SAAU2D,GACV,kBAAiBoB,GACjB,cAAgBtP,GACZlG,EAAA,IAACiG,EAAA,CACG,QAASuP,GACT,QAASC,GACT,SAAU3J,EAAY,gBACtB,MAAO5F,GAAO,MAClB,EAER,EAECoM,IAEOtQ,EAAA,KAAAsB,WAAA,WAAAtD,EAAA,IAACoP,EAAA,CACG,GAAIuG,GACJ,UAAWzT,EAAO,sBAClB,QAASkO,EACT,MAAM,oCACN,SAAU6D,GACV,kBAAiByB,GACjB,cAAgBxP,GACZlG,EAAA,IAACiG,EAAA,CACG,QAASyP,GACT,QAASC,GACT,SAAU7J,EAAY,oBACtB,MAAO5F,GAAO,MAClB,EAER,EAEAlG,EAAA,IAACoP,EAAA,CACG,GAAIyG,GACJ,UAAW3T,EAAO,sBAClB,QAASqO,GACT,MAAM,wBACN,SAAU2D,GACV,SAAU,CAAC9D,EACX,kBAAiBwF,GACjB,cAAgB1P,GACZlG,EAAA,IAACiG,EAAA,CACG,QAAS2P,GACT,QAASC,GACT,SAAU/J,EAAY,oBACtB,MAAO5F,GAAO,MAClB,EAER,GACJ,EAGJlG,EAAA,IAACoP,EAAA,CACG,GAAI2G,GACJ,UAAW7T,EAAO,sBAClB,QAASyO,EACT,MAAM,8BACN,SAAU0D,GACV,kBAAiByB,GACjB,cAAgB5P,GACZlG,EAAA,IAACiG,EAAA,CACG,QAAS6P,GACT,QAASC,GACT,SAAUjK,EAAY,yBACtB,MAAO5F,GAAO,MAClB,EAER,EAECkM,IACGpS,EAAA,IAACsO,GAAA,CACG,YAAa6C,GACb,WAAYzL,GACZ,eAAgBA,GAAY,CACxBiJ,GAAYjJ,CAAQ,CACxB,EACA,kBAA6BgR,GAAAtF,GAAcsF,CAAM,EACrD,EAGHlE,IACGxS,EAAA,IAAC+L,GAAA,CACG,qBAAsBK,EACtB,iBAAkB1G,IAAY0M,GAC9B,mBAAqBuE,GAAkC7F,GAAmB6F,CAAO,EACjF,oBAAsBvK,GAAiCC,EAAiBD,CAAa,EACzF,EAKIpK,EAAA,KAAAsB,WAAA,WAAAtD,EAAA,IAACoP,EAAA,CACG,GAAI6G,GACJ,UAAW/T,EAAO,sBAClB,QAAS6O,IAAwB7U,GACjC,MAAM,0BACN,SAAU,CAACoI,IAAYpI,GACvB,SAAUoY,GACV,kBAAiB0B,GACjB,cAAgB9P,GACZlG,EAAA,IAACiG,EAAA,CACG,QAAS+P,GACT,QAASC,GACT,SAAUnK,EAAY,qBACtB,MAAO5F,GAAO,MAClB,EAER,EACAlG,EAAA,IAACoP,EAAA,CACG,GAAI+G,GACJ,UAAWjU,EAAO,sBAClB,QAAS+O,IAA2B/U,GACpC,MAAM,6BACN,SAAU,CAACoI,IAAYpI,GACvB,SAAUqY,GACV,kBAAiB2B,GACjB,cAAgBhQ,GACZlG,EAAA,IAACiG,EAAA,CACG,QAASiQ,GACT,QAASC,GACT,SAAUrK,EAAY,wBACtB,MAAO5F,GAAO,MAClB,EAER,GACJ,EAGJlG,EAAA,IAACoP,EAAA,CACG,GAAIiH,GACJ,UAAWnU,EAAO,sBAClB,QAAS7D,EACT,MAAM,mCACN,SAAU8V,GACV,kBAAiBiC,GACjB,cAAgBlQ,GACZlG,MAACiG,GAAY,QAASmQ,GAAgB,QAASC,GAAqB,SAAUvK,EAAY,WAAY,MAAO5F,GAAO,MAAO,EAEnI,QAEc8G,GAAmB,KACrC,GACJ,CACJ,GAER,gyBCvrBa4J,GAAc,IAAM,CACvB,MAAE,SAAA3J,GAAavD,KACf,CAAE,SAAApF,EAAU,YAAAuS,CAAY,EAAItS,aAAWb,EAAY,EACnDhG,EAAgBuP,EAAS,mBACzB,CAAC6J,EAAUC,CAAW,EAAIpW,WAAS,EAAE,EAE3C6D,YAAU,IAAM,EACU,SAAY,CAC9BuS,EAAa,MAAMtZ,GAAYwP,CAAQ,GAAM,EAAE,KAIvD,EAAG,CAAE,GAEL,MAAM+J,EAAmB,IAAM,CAM3B/J,EACK,WAAW,CACR,GAAG3Q,GACH,YAAaE,GAAe,EAC/B,EACA,MAAegB,GAAA,QAAQ,IAAIA,CAAK,CAAC,EACjC,KAAK,SAAY,CACFqZ,EAAA,MAAMxZ,GAAc4P,CAAQ,CAAC,EACzC8J,EAAa,MAAMtZ,GAAYwP,CAAQ,GAAM,EAAE,EAClD,GAEHgK,EAAoB,IAAM,CACxBvZ,EACAuP,EACK,YAAY,CACT,sBAAuB,IACvB,QAASA,EAAS,iBAAiB,EACtC,EACA,MAAezP,GAAA,QAAQ,IAAIA,CAAK,CAAC,EACjC,KAAK,SAAY,CACFqZ,EAAA,MAAMxZ,GAAc4P,CAAQ,CAAC,EACzC8J,EAAa,MAAMtZ,GAAYwP,CAAQ,GAAM,EAAE,EAClD,EAEa7P,IACtB,EAGA,OAAA4C,EAAA,IAAC0G,GAAA,CACG,KAAMpC,EAAW;AAAA,EAAWwS,CAAQ,GAAK,QACzC,UAAW5U,GAAO,YAClB,QAASoC,EAAW2S,EAAoBD,CAAA,EAGpD,EC9DeE,GAAA,gCCWTC,GAAS,IAAM,CACjB,KAAM,CAACC,EAAUC,CAAW,EAAI1W,WAAS,EAAK,EACxC2W,EAAqChG,SAAO,IAAI,EAEhDiG,EAAa,IAAM,CACrBF,EAAY,CAACD,CAAQ,GAGnBI,EAAsBtU,GAAsB,CAC1CoU,EAAQ,SAAW,CAACA,EAAQ,QAAQ,SAASpU,EAAM,MAAc,GACjEmU,EAAY,EAAK,CACrB,EAGJ7S,mBAAU,KACF4S,EACS,0BAAiB,YAAaI,CAAkB,EAEhD,6BAAoB,YAAaA,CAAkB,EAEzD,IAAM,CACA,6BAAoB,YAAaA,CAAkB,IAEjE,CAACJ,CAAQ,CAAC,EAGRpV,OAAA,OAAI,UAAWE,EAAO,OACnB,UAAAlC,EAAA,IAAC,SAAO,WAAWkC,EAAO,OAAQ,KAAM,SACpC,SAACF,OAAA,OAAI,UAAWE,EAAO,gBAAiB,IAAKoV,EAC7C,UAAAtX,MAAC8I,GAAK,IAAG,IAAI,UAAW5G,EAAO,qBACvB,SAAAlC,EAAA,IAAC,OACb,IAAKkX,GACL,IAAI,OAEJ,MAAO,CAAE,MAAO,MAAO,OAAQ,OAAQ,WAAY,OAAO,QAAQ,MAAO,IAEjE,EACClX,EAAA,WACG,SAACgC,EAAA,WAAG,UAAW,GAAGE,EAAO,aAAa,IAAIkV,EAAWlV,EAAO,KAAO,EAAE,GACjE,UAAAlC,MAAC,KACG,UAAAA,EAAA,IAACyX,GAAA,CACG,GAAG,IACH,UAAW,CAAC,CAAE,SAAAC,KAAgBA,EAAWxV,EAAO,wBAA0BA,EAAO,kBACjF,QAAS,IAAMmV,EAAY,EAAK,EACnC,kBAGL,QACC,KACG,UAAArX,EAAA,IAACyX,GAAA,CACG,GAAG,MACH,UAAW,CAAC,CAAE,SAAAC,KAAgBA,EAAWxV,EAAO,wBAA0BA,EAAO,kBACjF,QAAS,IAAMmV,EAAY,EAAK,EACnC,4BAGL,GACJ,CACJ,GACCrV,EAAA,YAAI,UAAWE,EAAO,mBAClB,gBAAa0U,GAAY,IACzB5W,MAAAc,EAAA,CAAW,UAAW,CAAE,SAAU,iBAAqB,YAAWoB,EAAO,WAAY,QAASqV,EAAY,UAAU,aAAc,IACvI,GACJ,CACJ,SAECI,GAAO,GACZ,GAER,ECzEMC,GAAgB,IAAM,CACxB,KAAM,CAACtT,EAAUuS,CAAW,EAAIlW,WAAS,EAAK,EAChC,CACN,IAAAkX,EAAe,IAAIC,GAAwBzb,EAAU,EAGrD,OAACwb,EAAa,iBAAiB,GAAKA,EAAa,eAAe,EAAE,OAAS,GAE9DA,EAAA,iBAAiBA,EAAa,iBAAkB,GAIjEA,EAAa,iBAA0B3U,GAAA,CACnC,GAAIA,EAAM,YAAc6U,GAAU,eAAiB7U,EAAM,QAAS,CAC9D,MAAM8U,EAAU9U,EAAM,QACtB2U,EAAa,iBAAiBG,CAAO,CACzC,EACH,EAEDxT,YAAU,IAAM,EACU,SAAY,CAClBqS,EAAA,MAAMxZ,GAAcwa,CAAY,CAAC,KAIrD,EAAG,CAAE,GAGD7X,MAACiY,GAAa,UAAUJ,EACpB,SAAA7X,EAAA,IAAC0D,GAAa,SAAb,CACG,MAAO,CACH,SAAAY,EACA,YAAAuS,CACJ,EAEA,eAACM,GAAO,IAEhB,GAaR,CACJ,EC5CAe,KAEA,MAAMC,GAASC,GAAiB,CAC5B,CACI,KAAM,IACN,cAAUR,GAAc,IACxB,SAAU,CACN,CACI,MAAO,GACP,cAAUvI,GAAK,GACnB,EACA,CACI,KAAM,KACN,KAAM,IAAMgJ,GAAA,WAAO,mBAAiB,2JACxC,EACA,CACI,KAAM,IACN,KAAM,IAAMA,GAAA,WAAO,sBAAgB,4DACvC,CACJ,CACJ,CACJ,CAAC,EAEDC,GAAS,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,aAC/DC,GAAM,WAAN,CACG,SAACvY,EAAA,IAAAwY,GAAA,CAAe,OAAAL,EAAgB,GACpC,CACJ","names":["appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","configApi","askApi","request","headers","parsedResponse","chatApi","shouldStream","url","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","deleteUploadedFileApi","filename","listUploadedFilesApi","RetrievalMode","GPT4VInput","VectorFieldOptions","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","SpeechSynthesis","synth","getUtterance","utterance","voice","SpeechOutputBrowser","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","audio","SpeechOutputAzure","startOrStopAudio","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","speechUrl","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","jsxs","Stack","styles","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Fragment","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","loggedIn","useContext","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Send28Filled","Example","value","onClick","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","ExampleList","onExampleClicked","useGPT4V","UserChatMessage","message","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","isCalloutVisible","toggleIsCalloutVisible","useBoolean","descriptionId","useId","iconButtonId","Callout","DefaultButton","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","ThoughtProcess","thoughts","t","k","SyntaxHighlighter","MarkdownViewer","src","setContent","isLoading","setIsLoading","setError","removeAnchorLinks","html","ancorLinksRegex","markdownText","parsedHtml","marked","cleanedHtml","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","useMsal","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","UploadFile","setIsCalloutVisible","isUploading","setIsUploading","deletionStatus","setDeletionStatus","uploadedFile","setUploadedFile","uploadedFileError","setUploadedFileError","uploadedFiles","setUploadedFiles","handleButtonClick","listUploadedFiles","files","handleRemoveFile","handleUploadFile","e","file","formData","Add24Regular","Label","Text","toolTipText","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","retrievalMode","setRetrievalMode","vectorFieldOption","setVectorFieldOption","onRetrievalModeChange","option","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","Dropdown","TokenClaimsDisplay","instance","claims","setClaims","ToString","a","items","o","key","originalKey","columns","createTableColumn","b","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","onuseGPT4V","checked","onSetGPT4VInput","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","lastQuestionRef","useRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","makeApiRequest","clearChat","onPromptTemplateChange","onTemperatureChange","onSeedChange","onMinimumSearchScoreChange","onMinimumRerankerScoreChange","onRetrieveCountChange","onUseSemanticRankerChange","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","streamedAnswer","q","x","Panel","inputs","options","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","logo","Layout","menuOpen","setMenuOpen","menuRef","toggleMenu","handleClickOutside","NavLink","isActive","Outlet","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/i18n/tooltips.ts","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/public/frenwood.png","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\r\n\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nconst appServicesAuthTokenUrl = \".auth/me\";\r\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\r\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\r\n\r\ninterface AppServicesToken {\r\n    id_token: string;\r\n    access_token: string;\r\n    user_claims: Record<string, any>;\r\n    expires_on: string;\r\n}\r\n\r\ninterface AuthSetup {\r\n    // Set to true if login elements should be shown in the UI\r\n    useLogin: boolean;\r\n    // Set to true if access control is enforced by the application\r\n    requireAccessControl: boolean;\r\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\r\n    enableUnauthenticatedAccess: boolean;\r\n    /**\r\n     * Configuration object to be passed to MSAL instance on creation.\r\n     * For a full list of MSAL.js configuration parameters, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n     */\r\n    msalConfig: {\r\n        auth: {\r\n            clientId: string; // Client app id used for login\r\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\r\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\r\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n        };\r\n        cache: {\r\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\r\n        };\r\n    };\r\n    loginRequest: {\r\n        /**\r\n         * Scopes you add here will be prompted for user consent during sign-in.\r\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n         * For more information about OIDC scopes, visit:\r\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n         */\r\n        scopes: Array<string>;\r\n    };\r\n    tokenRequest: {\r\n        scopes: Array<string>;\r\n    };\r\n}\r\n\r\n// Fetch the auth setup JSON data from the API if not already cached\r\nasync function fetchAuthSetup(): Promise<AuthSetup> {\r\n    const response = await fetch(\"/auth_setup\");\r\n    if (!response.ok) {\r\n        throw new Error(`auth setup response was not ok: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nconst authSetup = await fetchAuthSetup();\r\nconsole.log(\"MSAL Configuration:\", authSetup.msalConfig);\r\nauthSetup.useLogin = true;\r\nauthSetup.requireAccessControl = true;\r\n\r\n// export const useLogin = authSetup.useLogin; original\r\nexport const useLogin = true;\r\n\r\nexport const requireAccessControl = authSetup.requireAccessControl;\r\n\r\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\r\n\r\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation.\r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport const msalConfig = authSetup.msalConfig;\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit:\r\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n */\r\nexport const loginRequest = authSetup.loginRequest;\r\n\r\nconst tokenRequest = authSetup.tokenRequest;\r\n\r\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\r\nexport const getRedirectUri = () => {\r\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\r\n};\r\n\r\n// Cache the app services token if it's available\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\r\ndeclare global {\r\n    var cachedAppServicesToken: AppServicesToken | null;\r\n}\r\nglobalThis.cachedAppServicesToken = null;\r\n\r\n/**\r\n * Retrieves an access token if the user is logged in using app services authentication.\r\n * Checks if the current token is expired and fetches a new token if necessary.\r\n * Returns null if the app doesn't support app services authentication.\r\n *\r\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\r\n */\r\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\r\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\r\n        const currentDate = new Date();\r\n        const expiresOnDate = new Date(appServicesToken.expires_on);\r\n        return expiresOnDate > currentDate;\r\n    };\r\n\r\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\r\n        return Promise.resolve(globalThis.cachedAppServicesToken);\r\n    }\r\n\r\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\r\n        return fetch(appServicesAuthTokenUrl).then(r => {\r\n            if (r.ok) {\r\n                return r.json().then(json => {\r\n                    if (json.length > 0) {\r\n                        return {\r\n                            id_token: json[0][\"id_token\"] as string,\r\n                            access_token: json[0][\"access_token\"] as string,\r\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\r\n                                acc[item.typ] = item.val;\r\n                                return acc;\r\n                            }, {}) as Record<string, any>,\r\n                            expires_on: json[0][\"expires_on\"] as string\r\n                        } as AppServicesToken;\r\n                    }\r\n\r\n                    return null;\r\n                });\r\n            }\r\n\r\n            return null;\r\n        });\r\n    };\r\n\r\n    return getAppServicesTokenFromMe().then(token => {\r\n        if (token) {\r\n            if (checkNotExpired(token)) {\r\n                globalThis.cachedAppServicesToken = token;\r\n                return token;\r\n            }\r\n\r\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\r\n                if (r.ok) {\r\n                    return getAppServicesTokenFromMe();\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\r\n\r\n// Sign out of app services\r\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\r\nexport const appServicesLogout = () => {\r\n    window.location.href = appServicesAuthLogoutUrl;\r\n};\r\n\r\n/**\r\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\r\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\r\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\r\n */\r\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\r\n    if (client) {\r\n        const activeAccount = client.getActiveAccount();\r\n        if (activeAccount) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n// Get an access token for use with the API server.\r\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\r\n// Use the access token from app services login if available\r\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return Promise.resolve(appServicesToken.access_token);\r\n    }\r\n\r\n    return client\r\n        .acquireTokenSilent({\r\n            ...tokenRequest,\r\n            redirectUri: getRedirectUri()\r\n        })\r\n        .then(r => r.accessToken)\r\n        .catch(error => {\r\n            console.log(error);\r\n            return undefined;\r\n        });\r\n};\r\n\r\n/**\r\n * Retrieves the username of the active account.\r\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\r\n */\r\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.username;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken?.user_claims) {\r\n        return appServicesToken.user_claims.preferred_username;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Retrieves the token claims of the active account.\r\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\r\n */\r\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.idTokenClaims;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return appServicesToken.user_claims;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","const BACKEND_URI = \"\";\r\n\r\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse } from \"./models\";\r\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\r\n\r\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\r\n    // If using login and not using app services, add the id token of the logged in account as the authorization\r\n    if (useLogin && !isUsingAppServicesLogin) {\r\n        if (idToken) {\r\n            return { Authorization: `Bearer ${idToken}` };\r\n        }\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nexport async function configApi(): Promise<Config> {\r\n    const response = await fetch(`${BACKEND_URI}/config`, {\r\n        method: \"GET\"\r\n    });\r\n\r\n    return (await response.json()) as Config;\r\n}\r\n\r\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(`${BACKEND_URI}/ask`, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\r\n    let url = `${BACKEND_URI}/chat`;\r\n    if (shouldStream) {\r\n        url += \"/stream\";\r\n    }\r\n    const headers = await getHeaders(idToken);\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport async function getSpeechApi(text: string): Promise<string | null> {\r\n    return await fetch(\"/speech\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            text: text\r\n        })\r\n    })\r\n        .then(response => {\r\n            if (response.status == 200) {\r\n                return response.blob();\r\n            } else if (response.status == 400) {\r\n                console.log(\"Speech synthesis is not enabled.\");\r\n                return null;\r\n            } else {\r\n                console.error(\"Unable to get speech synthesis.\");\r\n                return null;\r\n            }\r\n        })\r\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${BACKEND_URI}/content/${citation}`;\r\n}\r\n\r\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\r\n    const response = await fetch(\"/upload\", {\r\n        method: \"POST\",\r\n        headers: await getHeaders(idToken),\r\n        body: request\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Uploading files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(\"/delete_uploaded\", {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ filename })\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting file failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\r\n    const response = await fetch(`/list_uploaded`, {\r\n        method: \"GET\",\r\n        headers: await getHeaders(idToken)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Listing files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: string[] = await response.json();\r\n    return dataResponse;\r\n}\r\n","export const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport const enum GPT4VInput {\r\n    TextAndImages = \"textAndImages\",\r\n    Images = \"images\",\r\n    Texts = \"texts\"\r\n}\r\n\r\nexport const enum VectorFieldOptions {\r\n    Embedding = \"embedding\",\r\n    ImageEmbedding = \"imageEmbedding\",\r\n    Both = \"both\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    retrieval_mode?: RetrievalMode;\r\n    semantic_ranker?: boolean;\r\n    semantic_captions?: boolean;\r\n    exclude_category?: string;\r\n    seed?: number;\r\n    top?: number;\r\n    temperature?: number;\r\n    minimum_search_score?: number;\r\n    minimum_reranker_score?: number;\r\n    prompt_template?: string;\r\n    prompt_template_prefix?: string;\r\n    prompt_template_suffix?: string;\r\n    suggest_followup_questions?: boolean;\r\n    use_oid_security_filter?: boolean;\r\n    use_groups_security_filter?: boolean;\r\n    use_gpt4v?: boolean;\r\n    gpt4v_input?: GPT4VInput;\r\n    vector_fields: VectorFieldOptions[];\r\n};\r\n\r\nexport type ResponseMessage = {\r\n    content: string;\r\n    role: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: string };\r\n};\r\n\r\nexport type ResponseContext = {\r\n    data_points: string[];\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport type ChatAppResponseOrError = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n    error?: string;\r\n};\r\n\r\nexport type ChatAppResponse = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type ChatAppRequestContext = {\r\n    overrides?: ChatAppRequestOverrides;\r\n};\r\n\r\nexport type ChatAppRequest = {\r\n    messages: ResponseMessage[];\r\n    context?: ChatAppRequestContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type Config = {\r\n    showGPT4VOptions: boolean;\r\n    showSemanticRankerOption: boolean;\r\n    showVectorOption: boolean;\r\n    showUserUpload: boolean;\r\n    showSpeechInput: boolean;\r\n    showSpeechOutputBrowser: boolean;\r\n    showSpeechOutputAzure: boolean;\r\n};\r\n\r\nexport type SimpleAPIResponse = {\r\n    message?: string;\r\n};\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useState } from \"react\";\r\nimport { IconButton } from \"@fluentui/react\";\r\n\r\ninterface Props {\r\n    answer: string;\r\n}\r\n\r\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\r\n\r\nlet synth: SpeechSynthesis | null = null;\r\n\r\ntry {\r\n    synth = SpeechSynthesis;\r\n} catch (err) {\r\n    console.error(\"SpeechSynthesis is not supported\");\r\n}\r\n\r\nconst getUtterance = function (text: string) {\r\n    if (synth) {\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.lang = \"en-US\";\r\n        utterance.volume = 1;\r\n        utterance.rate = 1;\r\n        utterance.pitch = 1;\r\n        utterance.voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\r\n        return utterance;\r\n    }\r\n};\r\n\r\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\r\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n\r\n    const startOrStopSpeech = (answer: string) => {\r\n        if (synth != null) {\r\n            if (isPlaying) {\r\n                synth.cancel(); // removes all utterances from the utterance queue.\r\n                setIsPlaying(false);\r\n                return;\r\n            }\r\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer);\r\n\r\n            if (!utterance) {\r\n                return;\r\n            }\r\n\r\n            synth.speak(utterance);\r\n\r\n            utterance.onstart = () => {\r\n                setIsPlaying(true);\r\n                return;\r\n            };\r\n\r\n            utterance.onend = () => {\r\n                setIsPlaying(false);\r\n                return;\r\n            };\r\n        }\r\n    };\r\n    const color = isPlaying ? \"red\" : \"black\";\r\n\r\n    return (\r\n        <IconButton\r\n            style={{ color: color }}\r\n            iconProps={{ iconName: \"Volume3\" }}\r\n            title=\"Speak answer\"\r\n            ariaLabel=\"Speak answer\"\r\n            onClick={() => startOrStopSpeech(answer)}\r\n            disabled={!synth}\r\n        />\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nimport { IconButton } from \"@fluentui/react\";\r\n\r\ninterface Props {\r\n    url: string | null;\r\n}\r\n\r\nlet audio = new Audio();\r\n\r\nexport const SpeechOutputAzure = ({ url }: Props) => {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    const startOrStopAudio = async () => {\r\n        if (isPlaying) {\r\n            audio.pause();\r\n            setIsPlaying(false);\r\n            return;\r\n        }\r\n\r\n        if (!url) {\r\n            console.error(\"Speech output is not yet available.\");\r\n            return;\r\n        }\r\n        audio = new Audio(url);\r\n        await audio.play();\r\n        audio.addEventListener(\"ended\", () => {\r\n            setIsPlaying(false);\r\n        });\r\n        setIsPlaying(true);\r\n    };\r\n\r\n    const color = isPlaying ? \"red\" : \"black\";\r\n    return (\r\n        <IconButton\r\n            style={{ color: color }}\r\n            iconProps={{ iconName: \"Volume3\" }}\r\n            title=\"Speak answer\"\r\n            ariaLabel=\"Speak answer\"\r\n            onClick={() => startOrStopAudio()}\r\n            disabled={!url}\r\n        />\r\n    );\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\r\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\r\n\r\ninterface Props {\r\n    answer: ChatAppResponse;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n    showSpeechOutputBrowser?: boolean;\r\n    showSpeechOutputAzure?: boolean;\r\n    speechUrl: string | null;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    isStreaming,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions,\r\n    showSpeechOutputAzure,\r\n    showSpeechOutputBrowser,\r\n    speechUrl\r\n}: Props) => {\r\n    const followupQuestions = answer.context?.followup_questions;\r\n    const messageContent = answer.message.content;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.context.thoughts?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title=\"Show supporting content\"\r\n                            ariaLabel=\"Show supporting content\"\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.context.data_points}\r\n                        />\r\n                        {showSpeechOutputAzure && <SpeechOutputAzure url={speechUrl} />}\r\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>Citations:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                         Generating answer\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { SetStateAction, useState } from \"react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Mic28Filled } from \"@fluentui/react-icons\";\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    updateQuestion: (question: string) => void;\r\n}\r\n\r\nconst SpeechRecognition = (window as any).speechRecognition || (window as any).webkitSpeechRecognition;\r\nlet speechRecognition: {\r\n    continuous: boolean;\r\n    lang: string;\r\n    interimResults: boolean;\r\n    maxAlternatives: number;\r\n    start: () => void;\r\n    onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\r\n    onend: () => void;\r\n    onerror: (event: { error: string }) => void;\r\n    stop: () => void;\r\n} | null = null;\r\ntry {\r\n    speechRecognition = new SpeechRecognition();\r\n    if (speechRecognition != null) {\r\n        speechRecognition.lang = \"en-US\";\r\n        speechRecognition.interimResults = true;\r\n    }\r\n} catch (err) {\r\n    console.error(\"SpeechRecognition not supported\");\r\n    speechRecognition = null;\r\n}\r\n\r\nexport const SpeechInput = ({ updateQuestion }: Props) => {\r\n    const [isRecording, setIsRecording] = useState<boolean>(false);\r\n\r\n    const startRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n\r\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\r\n            let input = \"\";\r\n            for (const result of event.results) {\r\n                input += result[0].transcript;\r\n            }\r\n            updateQuestion(input);\r\n        };\r\n        speechRecognition.onend = () => {\r\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\r\n            setIsRecording(false);\r\n        };\r\n        speechRecognition.onerror = (event: { error: string }) => {\r\n            if (speechRecognition) {\r\n                speechRecognition.stop();\r\n                if (event.error == \"no-speech\") {\r\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\r\n                } else if (event.error == \"language-not-supported\") {\r\n                    alert(\r\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\r\n                    );\r\n                } else {\r\n                    alert(`Speech recognition error detected: ${event.error}.`);\r\n                }\r\n            }\r\n        };\r\n\r\n        setIsRecording(true);\r\n        speechRecognition.start();\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n        speechRecognition.stop();\r\n        setIsRecording(false);\r\n    };\r\n\r\n    if (speechRecognition == null) {\r\n        return <></>;\r\n    }\r\n    return (\r\n        <>\r\n            {!isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content=\"Ask question with voice\" relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n            {isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content=\"Stop recording question\" relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/**\r\n * This file defines a context for managing login state in a React application.\r\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\r\n * For more information, refer to the official React documentation:\r\n * https://react.dev/learn/passing-data-deeply-with-context\r\n */\r\n\r\nimport { createContext } from \"react\";\r\n\r\nexport const LoginContext = createContext({\r\n    loggedIn: false,\r\n    setLoggedIn: (_: boolean) => {}\r\n});\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { SpeechInput } from \"./SpeechInput\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { requireLogin } from \"../../authConfig\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n    showSpeechInput?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    useEffect(() => {\r\n        initQuestion && setQuestion(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\r\n    const sendQuestionDisabled = disabled || !question.trim() || requireLogin;\r\n\r\n    if (disableRequiredAccessControl) {\r\n        placeholder = \"Please login to continue...\";\r\n    }\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                disabled={disableRequiredAccessControl}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <Tooltip content=\"Submit question\" relationship=\"label\">\r\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\r\n                </Tooltip>\r\n            </div>\r\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nconst DEFAULT_EXAMPLES: string[] = [\r\n     \"What is the next month`s markerting campaign?\",\r\n    \"How do I register new staff member onto Fernwood Masterclass?\",\r\n    \"How do I access my Talkbox account?\"\r\n];\r\n\r\nconst GPT4V_EXAMPLES: string[] = [\r\n    \"Compare the impact of interest rates and GDP in financial markets.\",\r\n    \"How do I register new staff member onto Fernwood Masterclass?\",\r\n    \"How do I access my Talkbox account?\"\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n    useGPT4V?: boolean;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\r\n                <li key={i}>\r\n                    <Example text={question} value={question} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\r\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\r\n\r\nconst stackTokens: IStackTokens = {\r\n    childrenGap: 4,\r\n    maxWidth: 300\r\n};\r\n\r\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\r\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\r\nconst iconProps = { iconName: \"Info\" };\r\n\r\ninterface IHelpCalloutProps {\r\n    label: string | undefined;\r\n    labelId: string;\r\n    fieldId: string | undefined;\r\n    helpText: string;\r\n}\r\n\r\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\r\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\r\n    const descriptionId: string = useId(\"description\");\r\n    const iconButtonId: string = useId(\"iconButton\");\r\n\r\n    return (\r\n        <>\r\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\r\n                <label id={props.labelId} htmlFor={props.fieldId}>\r\n                    {props.label}\r\n                </label>\r\n                <IconButton id={iconButtonId} iconProps={iconProps} title=\"Info\" ariaLabel=\"Info\" onClick={toggleIsCalloutVisible} styles={iconButtonStyles} />\r\n            </Stack>\r\n            {isCalloutVisible && (\r\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\r\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\r\n                        <span id={descriptionId}>{props.helpText}</span>\r\n                        <DefaultButton onClick={toggleIsCalloutVisible}>Close</DefaultButton>\r\n                    </Stack>\r\n                </Callout>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import DOMPurify from \"dompurify\";\r\n\r\ntype ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\r\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {textItems.map((c, ind) => {\r\n                const parsed = parseSupportingContentItem(c);\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={ind}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\r\n                    </li>\r\n                );\r\n            })}\r\n            {imageItems?.map((img, ind) => {\r\n                return <img className={styles.supportingContentItemImage} src={img.url} key={ind} />;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Stack } from \"@fluentui/react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { Thoughts } from \"../../api\";\r\n\r\ninterface Props {\r\n    thoughts: Thoughts[];\r\n}\r\n\r\nexport const ThoughtProcess = ({ thoughts }: Props) => {\r\n    return (\r\n        <ul className={styles.tList}>\r\n            {thoughts.map((t, ind) => {\r\n                return (\r\n                    <li className={styles.tListItem} key={ind}>\r\n                        <div className={styles.tStep}>{t.title}</div>\r\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                            {t.props &&\r\n                                (Object.keys(t.props) || []).map((k: any) => (\r\n                                    <span className={styles.tProp}>\r\n                                        {k}: {JSON.stringify(t.props?.[k])}\r\n                                    </span>\r\n                                ))}\r\n                        </Stack>\r\n                        {Array.isArray(t.description) ? (\r\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock}>\r\n                                {JSON.stringify(t.description, null, 2)}\r\n                            </SyntaxHighlighter>\r\n                        ) : (\r\n                            <div>{t.description}</div>\r\n                        )}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { marked } from \"marked\";\r\nimport styles from \"./MarkdownViewer.module.css\";\r\nimport { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\r\n\r\ninterface MarkdownViewerProps {\r\n    src: string;\r\n}\r\n\r\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\r\n    const [content, setContent] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<Error | null>(null);\r\n\r\n    /**\r\n     * Anchor links are not handled well by 'marked' and result in HTTP 404 errors as the URL they point to does not exist.\r\n     * This function removes them from the resulted HTML.\r\n     */\r\n    const removeAnchorLinks = (html: string) => {\r\n        const ancorLinksRegex = /<a\\s+(?:[^>]*?\\s+)?href=['\"](#[^\"']*?)['\"][^>]*?>/g;\r\n        return html.replace(ancorLinksRegex, \"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchMarkdown = async () => {\r\n            try {\r\n                const response = await fetch(src);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed loading markdown file.\");\r\n                }\r\n\r\n                const markdownText = await response.text();\r\n                const parsedHtml = await marked.parse(markdownText);\r\n                const cleanedHtml = removeAnchorLinks(parsedHtml);\r\n                setContent(cleanedHtml);\r\n            } catch (error: any) {\r\n                setError(error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMarkdown();\r\n    }, [src]);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? (\r\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\r\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\r\n                </div>\r\n            ) : error ? (\r\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\r\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\r\n                        {error.message}\r\n                        <Link href={src} download>\r\n                            Download the file\r\n                        </Link>\r\n                    </MessageBar>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <IconButton\r\n                        className={styles.downloadButton}\r\n                        style={{ color: \"black\" }}\r\n                        iconProps={{ iconName: \"Save\" }}\r\n                        title=\"Save\"\r\n                        ariaLabel=\"Save\"\r\n                        href={src}\r\n                        download\r\n                    />\r\n                    <div className={`${styles.markdown} ${styles.markdownViewer}`} dangerouslySetInnerHTML={{ __html: content }} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { ChatAppResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\nimport { MarkdownViewer } from \"../MarkdownViewer\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getHeaders } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: ChatAppResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n    const [citation, setCitation] = useState(\"\");\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const fetchCitation = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        if (activeCitation) {\r\n            // Get hash from the URL as it may contain #page=N\r\n            // which helps browser PDF renderer jump to correct page N\r\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\r\n            const response = await fetch(activeCitation, {\r\n                method: \"GET\",\r\n                headers: await getHeaders(token)\r\n            });\r\n            const citationContent = await response.blob();\r\n            let citationObjectUrl = URL.createObjectURL(citationContent);\r\n            // Add hash back to the new blob URL\r\n            if (originalHash) {\r\n                citationObjectUrl += \"#\" + originalHash;\r\n            }\r\n            setCitation(citationObjectUrl);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchCitation();\r\n    }, []);\r\n\r\n    const renderFileViewer = () => {\r\n        if (!activeCitation) {\r\n            return null;\r\n        }\r\n\r\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\r\n        switch (fileExtension) {\r\n            case \"png\":\r\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\r\n            case \"md\":\r\n                return <MarkdownViewer src={activeCitation} />;\r\n            default:\r\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"Thought process\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText=\"Supporting content\"\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.context.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText=\"Citation\"\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                {renderFileViewer()}\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={onClick}>\r\n                {\"Developer settings\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\r\n                {\"Clear chat\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { Callout, Label, Text } from \"@fluentui/react\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport styles from \"./UploadFile.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\r\n    // State variables to manage the component behavior\r\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\r\n    const [isUploading, setIsUploading] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\r\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\r\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\r\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\r\n\r\n    if (!useLogin) {\r\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\r\n    }\r\n\r\n    const client = useMsal().instance;\r\n\r\n    // Handler for the \"Manage file uploads\" button\r\n    const handleButtonClick = async () => {\r\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\r\n\r\n        // Update uploaded files by calling the API\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const listUploadedFiles = async (idToken: string) => {\r\n        listUploadedFilesApi(idToken).then(files => {\r\n            setIsLoading(false);\r\n            setDeletionStatus({});\r\n            setUploadedFiles(files);\r\n        });\r\n    };\r\n\r\n    const handleRemoveFile = async (filename: string) => {\r\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n\r\n            await deleteUploadedFileApi(filename, idToken);\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // Handler for the form submission (file upload)\r\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (!e.target.files || e.target.files.length === 0) {\r\n            return;\r\n        }\r\n        setIsUploading(true); // Start the loading state\r\n        const file: File = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\r\n            setUploadedFile(response);\r\n            setIsUploading(false);\r\n            setUploadedFileError(undefined);\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsUploading(false);\r\n            setUploadedFileError(`Error uploading file - please try again or contact admin.`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <div>\r\n                <Button id=\"calloutButton\" icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\r\n                    Manage file uploads\r\n                </Button>\r\n\r\n                {isCalloutVisible && (\r\n                    <Callout\r\n                        role=\"dialog\"\r\n                        gapSpace={0}\r\n                        className={styles.callout}\r\n                        target=\"#calloutButton\"\r\n                        onDismiss={() => setIsCalloutVisible(false)}\r\n                        setInitialFocus\r\n                    >\r\n                        <form encType=\"multipart/form-data\">\r\n                            <div>\r\n                                <Label>Upload file:</Label>\r\n                                <input\r\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\r\n                                    className={styles.chooseFiles}\r\n                                    type=\"file\"\r\n                                    onChange={handleUploadFile}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n\r\n                        {/* Show a loading message while files are being uploaded */}\r\n                        {isUploading && <Text>{\"Uploading files...\"}</Text>}\r\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\r\n                        {!isUploading && uploadedFile && <Text>{uploadedFile.message}</Text>}\r\n\r\n                        {/* Display the list of already uploaded */}\r\n                        <h3>Previously uploaded files:</h3>\r\n\r\n                        {isLoading && <Text>Loading...</Text>}\r\n                        {!isLoading && uploadedFiles.length === 0 && <Text>No files uploaded yet</Text>}\r\n                        {uploadedFiles.map((filename, index) => {\r\n                            return (\r\n                                <div key={index} className={styles.list}>\r\n                                    <div className={styles.item}>{filename}</div>\r\n                                    {/* Button to remove a file from the list */}\r\n                                    <Button\r\n                                        icon={<Delete24Regular />}\r\n                                        onClick={() => handleRemoveFile(filename)}\r\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\r\n                                    >\r\n                                        {!deletionStatus[filename] && \"Delete file\"}\r\n                                        {deletionStatus[filename] == \"pending\" && \"Deleting file...\"}\r\n                                        {deletionStatus[filename] == \"error\" && \"Error deleting.\"}\r\n                                        {deletionStatus[filename] == \"success\" && \"File deleted\"}\r\n                                    </Button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </Callout>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// Keep values less than 20 words.\r\n// Don't add links to the tooltips.\r\nexport const toolTipText = {\r\n    promptTemplate:\r\n        \"Overrides the prompt used to generate the answer based on the question and search results. To append to existing prompt instead of replace whole prompt, start your prompt with '>>>'.\",\r\n    temperature:\r\n        \"Sets the temperature of the request to the LLM that generates the answer. Higher temperatures result in more creative responses, but they may be less grounded.\",\r\n    seed: \"Sets a seed to improve the reproducibility of the model's responses. The seed can be any integer.\",\r\n    searchScore:\r\n        \"Sets a minimum score for search results coming back from Azure AI search. The score range depends on whether you're using hybrid (default), vectors only, or text only.\",\r\n    rerankerScore:\r\n        \"Sets a minimum score for search results coming back from the semantic reranker. The score always ranges between 0-4. The higher the score, the more semantically relevant the result is to the question.\",\r\n    retrieveNumber:\r\n        \"Sets the number of search results to retrieve from Azure AI search. More results may increase the likelihood of finding the correct answer, but may lead to the model getting 'lost in the middle'.\",\r\n    excludeCategory: \"Specifies a category to exclude from the search results. There are no categories used in the default data set.\",\r\n    useSemanticReranker: \"Enables the Azure AI Search semantic ranker, a model that re-ranks search results based on semantic similarity to the user's query.\",\r\n    useSemanticCaptions:\r\n        \"Sends semantic captions to the LLM instead of the full search result. A semantic caption is extracted from a search result during the process of semantic ranking.\",\r\n    suggestFollowupQuestions: \"Asks the LLM to suggest follow-up questions based on the user's query.\",\r\n    useGPT4Vision: \"Uses GPT-4-Turbo with Vision to generate responses based on images and text from the index.\",\r\n    vectorFields:\r\n        \"Specifies which embedding fields in the Azure AI Search Index will be searched, both the 'Images and text' embeddings, 'Images' only, or 'Text' only.\",\r\n    gpt4VisionInputs:\r\n        \"Sets what will be sent to the vision model. 'Images and text' sends both images and text to the model, 'Images' sends only images, and 'Text' sends only text.\",\r\n    retrievalMode:\r\n        \"Sets the retrieval mode for the Azure AI Search query. `Vectors + Text (Hybrid)` uses a combination of vector search and full text search, `Vectors` uses only vector search, and `Text` uses only full text search. Hybrid is generally optimal.\",\r\n    streamChat: \"Continuously streams the response to the chat UI as it is generated.\",\r\n    useOidSecurityFilter: \"Filter search results based on the authenticated user's OID.\",\r\n    useGroupsSecurityFilter: \"Filter search results based on the authenticated user's groups.\"\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\n\r\nimport styles from \"./VectorSettings.module.css\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\r\nimport { toolTipText } from \"../../i18n/tooltips.js\";\r\n\r\ninterface Props {\r\n    showImageOptions?: boolean;\r\n    defaultRetrievalMode: RetrievalMode;\r\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\r\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\r\n}\r\n\r\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode }: Props) => {\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<VectorFieldOptions>(VectorFieldOptions.Both);\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setVectorFieldOption(option?.key as VectorFieldOptions);\r\n        updateVectorFields([option?.key as VectorFieldOptions]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        showImageOptions\r\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\r\n            : updateVectorFields([VectorFieldOptions.Embedding]);\r\n    }, [showImageOptions]);\r\n\r\n    const retrievalModeId = useId(\"retrievalMode\");\r\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\r\n    const vectorFieldsId = useId(\"vectorFields\");\r\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Dropdown\r\n                id={retrievalModeFieldId}\r\n                label=\"Retrieval mode\"\r\n                selectedKey={defaultRetrievalMode.toString()}\r\n                options={[\r\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\r\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\r\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                ]}\r\n                required\r\n                onChange={onRetrievalModeChange}\r\n                aria-labelledby={retrievalModeId}\r\n                onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={toolTipText.retrievalMode} label={props?.label} />\r\n                )}\r\n            />\r\n\r\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\r\n                <Dropdown\r\n                    id={vectorFieldsFieldId}\r\n                    label=\"Vector fields (Multi-query vector search)\"\r\n                    options={[\r\n                        { key: VectorFieldOptions.Embedding, text: \"Text Embeddings\", selected: vectorFieldOption === VectorFieldOptions.Embedding },\r\n                        { key: VectorFieldOptions.ImageEmbedding, text: \"Image Embeddings\", selected: vectorFieldOption === VectorFieldOptions.ImageEmbedding },\r\n                        { key: VectorFieldOptions.Both, text: \"Text and Image embeddings\", selected: vectorFieldOption === VectorFieldOptions.Both }\r\n                    ]}\r\n                    onChange={onVectorFieldsChange}\r\n                    aria-labelledby={vectorFieldsId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={toolTipText.vectorFields} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Label } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport {\r\n    DataGridBody,\r\n    DataGridRow,\r\n    DataGrid,\r\n    DataGridHeader,\r\n    DataGridHeaderCell,\r\n    DataGridCell,\r\n    createTableColumn,\r\n    TableColumnDefinition\r\n} from \"@fluentui/react-table\";\r\nimport { getTokenClaims } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ntype Claim = {\r\n    name: string;\r\n    value: string;\r\n};\r\n\r\nexport const TokenClaimsDisplay = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const fetchClaims = async () => {\r\n            setClaims(await getTokenClaims(instance));\r\n        };\r\n\r\n        fetchClaims();\r\n    }, []);\r\n\r\n    const ToString = (a: string | any) => {\r\n        if (typeof a === \"string\") {\r\n            return a;\r\n        } else {\r\n            return JSON.stringify(a);\r\n        }\r\n    };\r\n\r\n    let createClaims = (o: Record<string, unknown> | undefined) => {\r\n        return Object.keys(o ?? {}).map((key: string) => {\r\n            let originalKey = key;\r\n            try {\r\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\r\n                const url = new URL(key);\r\n                const parts = url.pathname.split(\"/\");\r\n                key = parts[parts.length - 1];\r\n            } catch (error) {\r\n                // Do not parse key if it's not a URL\r\n            }\r\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\r\n        });\r\n    };\r\n    const items: Claim[] = createClaims(claims);\r\n\r\n    const columns: TableColumnDefinition<Claim>[] = [\r\n        createTableColumn<Claim>({\r\n            columnId: \"name\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.name.localeCompare(b.name);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Name\";\r\n            },\r\n            renderCell: item => {\r\n                return item.name;\r\n            }\r\n        }),\r\n        createTableColumn<Claim>({\r\n            columnId: \"value\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.value.localeCompare(b.value);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Value\";\r\n            },\r\n            renderCell: item => {\r\n                return item.value;\r\n            }\r\n        })\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Label>ID Token Claims</Label>\r\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\r\n                <DataGridHeader>\r\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<Claim>>\r\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\n\r\nimport styles from \"./GPT4VSettings.module.css\";\r\nimport { GPT4VInput } from \"../../api\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { toolTipText } from \"../../i18n/tooltips.js\";\r\n\r\ninterface Props {\r\n    gpt4vInputs: GPT4VInput;\r\n    isUseGPT4V: boolean;\r\n    updateGPT4VInputs: (input: GPT4VInput) => void;\r\n    updateUseGPT4V: (useGPT4V: boolean) => void;\r\n}\r\n\r\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\r\n\r\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        updateUseGPT4V(!!checked);\r\n        setUseGPT4V(!!checked);\r\n    };\r\n\r\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\r\n        if (option) {\r\n            const data = option.key as GPT4VInput;\r\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\r\n            data && setVectorFieldOption(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\r\n    }, [useGPT4V]);\r\n\r\n    const useGPT4VId = useId(\"useGPT4V\");\r\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\r\n    const gpt4VInputId = useId(\"gpt4VInput\");\r\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Checkbox\r\n                id={useGPT4VFieldId}\r\n                checked={useGPT4V}\r\n                label=\"Use GPT vision model\"\r\n                onChange={onuseGPT4V}\r\n                aria-labelledby={useGPT4VId}\r\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={toolTipText.useGPT4Vision} label={props?.label} />\r\n                )}\r\n            />\r\n            {useGPT4V && (\r\n                <Dropdown\r\n                    id={gpt4VInputFieldId}\r\n                    selectedKey={vectorFieldOption}\r\n                    label=\"GPT vision model inputs\"\r\n                    options={[\r\n                        {\r\n                            key: GPT4VInput.TextAndImages,\r\n                            text: \"Images and text\"\r\n                        },\r\n                        { text: \"Images\", key: GPT4VInput.Images },\r\n                        { text: \"Text\", key: GPT4VInput.Texts }\r\n                    ]}\r\n                    required\r\n                    onChange={onSetGPT4VInput}\r\n                    aria-labelledby={gpt4VInputId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={toolTipText.gpt4VisionInputs} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, ITextFieldProps, ICheckboxProps } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport {\r\n    chatApi,\r\n    configApi,\r\n    getSpeechApi,\r\n    RetrievalMode,\r\n    ChatAppResponse,\r\n    ChatAppResponseOrError,\r\n    ChatAppRequest,\r\n    ResponseMessage,\r\n    VectorFieldOptions,\r\n    GPT4VInput\r\n} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { toolTipText } from \"../../i18n/tooltips.js\";\r\nimport { LoginContext } from \"../../loginContext\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [seed, setSeed] = useState<number | null>(null);\r\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\r\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\r\n\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\r\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\r\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\r\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\r\n\r\n    const getConfig = async () => {\r\n        configApi().then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n            setShowUserUpload(config.showUserUpload);\r\n            setShowSpeechInput(config.showSpeechInput);\r\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\r\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\r\n        });\r\n    };\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        message: { content: answer, role: askResponse.message.role }\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\r\n                    event[\"message\"] = event[\"delta\"];\r\n                    askResponse = event as ChatAppResponse;\r\n                } else if (event[\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    await updateState(event[\"delta\"][\"content\"]);\r\n                } else if (event[\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            message: { content: answer, role: askResponse.message.role }\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        temperature: temperature,\r\n                        minimum_reranker_score: minimumRerankerScore,\r\n                        minimum_search_score: minimumSearchScore,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        suggest_followup_questions: useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput,\r\n                        ...(seed !== null ? { seed: seed } : {})\r\n                    }\r\n                },\r\n                // AI Chat Protocol: Client must pass on any session state received from the server\r\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\r\n            };\r\n\r\n            const response = await chatApi(request, shouldStream, token);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (answers && showSpeechOutputAzure) {\r\n            // For each answer that is missing a speech URL, fetch the speech URL\r\n            for (let i = 0; i < answers.length; i++) {\r\n                if (!speechUrls[i]) {\r\n                    getSpeechApi(answers[i][1].message.content).then(speechUrl => {\r\n                        setSpeechUrls([...speechUrls.slice(0, i), speechUrl, ...speechUrls.slice(i + 1)]);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }, [answers]);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setTemperature(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onSeedChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setSeed(parseInt(newValue || \"\"));\r\n    };\r\n\r\n    const onMinimumSearchScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumSearchScore(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onMinimumRerankerScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumRerankerScore(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setShouldStream(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    // IDs for form labels and their associated callouts\r\n    const promptTemplateId = useId(\"promptTemplate\");\r\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\r\n    const temperatureId = useId(\"temperature\");\r\n    const temperatureFieldId = useId(\"temperatureField\");\r\n    const seedId = useId(\"seed\");\r\n    const seedFieldId = useId(\"seedField\");\r\n    const searchScoreId = useId(\"searchScore\");\r\n    const searchScoreFieldId = useId(\"searchScoreField\");\r\n    const rerankerScoreId = useId(\"rerankerScore\");\r\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\r\n    const retrieveCountId = useId(\"retrieveCount\");\r\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\r\n    const excludeCategoryId = useId(\"excludeCategory\");\r\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\r\n    const semanticRankerId = useId(\"semanticRanker\");\r\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\r\n    const semanticCaptionsId = useId(\"semanticCaptions\");\r\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\r\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\r\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\r\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\r\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\r\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\r\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\r\n    const shouldStreamId = useId(\"shouldStream\");\r\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />}\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                        <h1 className={styles.chatEmptyStateTitle}>Chat with Fernie your  Fernwood  Assistant</h1>\r\n                        <h2 className={styles.chatEmptyStateSubtitle}>Ask Fernie anything, try an example below</h2>\r\n                            \r\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {isStreaming &&\r\n                                streamedAnswers.map((streamedAnswer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={streamedAnswer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={true}\r\n                                                key={index}\r\n                                                answer={streamedAnswer[1]}\r\n                                                isSelected={false}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\r\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                                                speechUrl={speechUrls[index]}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {!isStreaming &&\r\n                                answers.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\r\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                                                speechUrl={speechUrls[index]}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Type a new question (e.g. does my plan cover annual eye exams?)\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                            showSpeechInput={showSpeechInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Configure answer generation\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        id={promptTemplateFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Override prompt template\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                        aria-labelledby={promptTemplateId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout\r\n                                labelId={promptTemplateId}\r\n                                fieldId={promptTemplateFieldId}\r\n                                helpText={toolTipText.promptTemplate}\r\n                                label={props?.label}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <TextField\r\n                        id={temperatureFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Temperature\"\r\n                        type=\"number\"\r\n                        min={0}\r\n                        max={1}\r\n                        step={0.1}\r\n                        defaultValue={temperature.toString()}\r\n                        onChange={onTemperatureChange}\r\n                        aria-labelledby={temperatureId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={toolTipText.temperature} label={props?.label} />\r\n                        )}\r\n                    />\r\n\r\n                    <TextField\r\n                        id={seedFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Seed\"\r\n                        type=\"text\"\r\n                        defaultValue={seed?.toString() || \"\"}\r\n                        onChange={onSeedChange}\r\n                        aria-labelledby={seedId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={toolTipText.seed} label={props?.label} />\r\n                        )}\r\n                    />\r\n\r\n                    <TextField\r\n                        id={searchScoreFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Minimum search score\"\r\n                        type=\"number\"\r\n                        min={0}\r\n                        step={0.01}\r\n                        defaultValue={minimumSearchScore.toString()}\r\n                        onChange={onMinimumSearchScoreChange}\r\n                        aria-labelledby={searchScoreId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={toolTipText.searchScore} label={props?.label} />\r\n                        )}\r\n                    />\r\n\r\n                    {showSemanticRankerOption && (\r\n                        <TextField\r\n                            id={rerankerScoreFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            label=\"Minimum reranker score\"\r\n                            type=\"number\"\r\n                            min={1}\r\n                            max={4}\r\n                            step={0.1}\r\n                            defaultValue={minimumRerankerScore.toString()}\r\n                            onChange={onMinimumRerankerScoreChange}\r\n                            aria-labelledby={rerankerScoreId}\r\n                            onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={rerankerScoreId}\r\n                                    fieldId={rerankerScoreFieldId}\r\n                                    helpText={toolTipText.rerankerScore}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                    )}\r\n\r\n                    <TextField\r\n                        id={retrieveCountFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Retrieve this many search results:\"\r\n                        type=\"number\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                        aria-labelledby={retrieveCountId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout labelId={retrieveCountId} fieldId={retrieveCountFieldId} helpText={toolTipText.retrieveNumber} label={props?.label} />\r\n                        )}\r\n                    />\r\n\r\n                    <TextField\r\n                        id={excludeCategoryFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Exclude category\"\r\n                        defaultValue={excludeCategory}\r\n                        onChange={onExcludeCategoryChanged}\r\n                        aria-labelledby={excludeCategoryId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout\r\n                                labelId={excludeCategoryId}\r\n                                fieldId={excludeCategoryFieldId}\r\n                                helpText={toolTipText.excludeCategory}\r\n                                label={props?.label}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    {showSemanticRankerOption && (\r\n                        <>\r\n                            <Checkbox\r\n                                id={semanticRankerFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                checked={useSemanticRanker}\r\n                                label=\"Use semantic ranker for retrieval\"\r\n                                onChange={onUseSemanticRankerChange}\r\n                                aria-labelledby={semanticRankerId}\r\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={semanticRankerId}\r\n                                        fieldId={semanticRankerFieldId}\r\n                                        helpText={toolTipText.useSemanticReranker}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            <Checkbox\r\n                                id={semanticCaptionsFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                checked={useSemanticCaptions}\r\n                                label=\"Use semantic captions\"\r\n                                onChange={onUseSemanticCaptionsChange}\r\n                                disabled={!useSemanticRanker}\r\n                                aria-labelledby={semanticCaptionsId}\r\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={semanticCaptionsId}\r\n                                        fieldId={semanticCaptionsFieldId}\r\n                                        helpText={toolTipText.useSemanticCaptions}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </>\r\n                    )}\r\n\r\n                    <Checkbox\r\n                        id={suggestFollowupQuestionsFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSuggestFollowupQuestions}\r\n                        label=\"Suggest follow-up questions\"\r\n                        onChange={onUseSuggestFollowupQuestionsChange}\r\n                        aria-labelledby={suggestFollowupQuestionsId}\r\n                        onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                            <HelpCallout\r\n                                labelId={suggestFollowupQuestionsId}\r\n                                fieldId={suggestFollowupQuestionsFieldId}\r\n                                helpText={toolTipText.suggestFollowupQuestions}\r\n                                label={props?.label}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    {showGPT4VOptions && (\r\n                        <GPT4VSettings\r\n                            gpt4vInputs={gpt4vInput}\r\n                            isUseGPT4V={useGPT4V}\r\n                            updateUseGPT4V={useGPT4V => {\r\n                                setUseGPT4V(useGPT4V);\r\n                            }}\r\n                            updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                        />\r\n                    )}\r\n\r\n                    {showVectorOption && (\r\n                        <VectorSettings\r\n                            defaultRetrievalMode={retrievalMode}\r\n                            showImageOptions={useGPT4V && showGPT4VOptions}\r\n                            updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\r\n                            updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                        />\r\n                    )}\r\n\r\n                    {useLogin && (\r\n                        <>\r\n                            <Checkbox\r\n                                id={useOidSecurityFilterFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                checked={useOidSecurityFilter || requireAccessControl}\r\n                                label=\"Use oid security filter\"\r\n                                disabled={!loggedIn || requireAccessControl}\r\n                                onChange={onUseOidSecurityFilterChange}\r\n                                aria-labelledby={useOidSecurityFilterId}\r\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={useOidSecurityFilterId}\r\n                                        fieldId={useOidSecurityFilterFieldId}\r\n                                        helpText={toolTipText.useOidSecurityFilter}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Checkbox\r\n                                id={useGroupsSecurityFilterFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                checked={useGroupsSecurityFilter || requireAccessControl}\r\n                                label=\"Use groups security filter\"\r\n                                disabled={!loggedIn || requireAccessControl}\r\n                                onChange={onUseGroupsSecurityFilterChange}\r\n                                aria-labelledby={useGroupsSecurityFilterId}\r\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={useGroupsSecurityFilterId}\r\n                                        fieldId={useGroupsSecurityFilterFieldId}\r\n                                        helpText={toolTipText.useGroupsSecurityFilter}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </>\r\n                    )}\r\n\r\n                    <Checkbox\r\n                        id={shouldStreamFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={shouldStream}\r\n                        label=\"Stream chat completion responses\"\r\n                        onChange={onShouldStreamChange}\r\n                        aria-labelledby={shouldStreamId}\r\n                        onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                            <HelpCallout labelId={shouldStreamId} fieldId={shouldStreamFieldId} helpText={toolTipText.streamChat} label={props?.label} />\r\n                        )}\r\n                    />\r\n\r\n                    {useLogin && <TokenClaimsDisplay />}\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import { DefaultButton } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\nimport styles from \"./LoginButton.module.css\";\r\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { LoginContext } from \"../../loginContext\";\r\n\r\nexport const LoginButton = () => {\r\n    const { instance } = useMsal();\r\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [username, setUsername] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const fetchUsername = async () => {\r\n            setUsername((await getUsername(instance)) ?? \"\");\r\n        };\r\n\r\n        fetchUsername();\r\n    }, []);\r\n\r\n    const handleLoginPopup = () => {\r\n        /**\r\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\r\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\r\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\r\n         */\r\n        instance\r\n            .loginPopup({\r\n                ...loginRequest,\r\n                redirectUri: getRedirectUri()\r\n            })\r\n            .catch(error => console.log(error))\r\n            .then(async () => {\r\n                setLoggedIn(await checkLoggedIn(instance));\r\n                setUsername((await getUsername(instance)) ?? \"\");\r\n            });\r\n    };\r\n    const handleLogoutPopup = () => {\r\n        if (activeAccount) {\r\n            instance\r\n                .logoutPopup({\r\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\r\n                    account: instance.getActiveAccount()\r\n                })\r\n                .catch(error => console.log(error))\r\n                .then(async () => {\r\n                    setLoggedIn(await checkLoggedIn(instance));\r\n                    setUsername((await getUsername(instance)) ?? \"\");\r\n                });\r\n        } else {\r\n            appServicesLogout();\r\n        }\r\n    };\r\n    return (\r\n        <DefaultButton\r\n            text={loggedIn ? `Logout\\n${username}` : \"Login\"}\r\n            className={styles.loginButton}\r\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\r\n        ></DefaultButton>\r\n    );\r\n};\r\n","export default \"__VITE_ASSET__7a4ad4b2__\"","import React, { useState, useEffect, useRef, RefObject } from \"react\";\r\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nimport { useLogin } from \"../../authConfig\";\r\n\r\nimport { LoginButton } from \"../../components/LoginButton\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport logo from '../../../public/frenwood.png'\r\n\r\nconst Layout = () => {\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\r\n\r\n    const toggleMenu = () => {\r\n        setMenuOpen(!menuOpen);\r\n    };\r\n\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n            setMenuOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (menuOpen) {\r\n            document.addEventListener(\"mousedown\", handleClickOutside);\r\n        } else {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        }\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [menuOpen]);\r\n\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer} ref={menuRef}>\r\n                <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <img\r\n            src={logo}\r\n            alt=\"Logo\"\r\n           \r\n            style={{ width: \"50%\", height: \"100%\", marginLeft: \"10px\",padding:\"10px\" }}\r\n          />\r\n                    </Link>\r\n                    <nav>\r\n                        <ul className={`${styles.headerNavList} ${menuOpen ? styles.show : \"\"}`}>\r\n                            <li>\r\n                                <NavLink\r\n                                    to=\"/\"\r\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    onClick={() => setMenuOpen(false)}\r\n                                >\r\n                                    Chat\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink\r\n                                    to=\"/qa\"\r\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    onClick={() => setMenuOpen(false)}\r\n                                >\r\n                                    Ask a question\r\n                                </NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <div className={styles.loginMenuContainer}>\r\n                        {useLogin && <LoginButton />}\r\n                        <IconButton iconProps={{ iconName: \"GlobalNavButton\" }} className={styles.menuToggle} onClick={toggleMenu} ariaLabel=\"Toggle menu\" />\r\n                    </div>\r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { LoginContext } from \"./loginContext\";\r\nimport Layout from \"./pages/layout/Layout\";\r\n\r\nconst LayoutWrapper = () => {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    if (useLogin) {\r\n        var msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n        // Default to using the first account if no account is active on page load\r\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\r\n        }\r\n\r\n        // Listen for sign-in event and set active account\r\n        msalInstance.addEventCallback(event => {\r\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\r\n                const account = event.payload as AccountInfo;\r\n                msalInstance.setActiveAccount(account);\r\n            }\r\n        });\r\n\r\n        useEffect(() => {\r\n            const fetchLoggedIn = async () => {\r\n                setLoggedIn(await checkLoggedIn(msalInstance));\r\n            };\r\n\r\n            fetchLoggedIn();\r\n        }, []);\r\n\r\n        return (\r\n            <MsalProvider instance={msalInstance}>\r\n                <LoginContext.Provider\r\n                    value={{\r\n                        loggedIn,\r\n                        setLoggedIn\r\n                    }}\r\n                >\r\n                    <Layout />\r\n                </LoginContext.Provider>\r\n            </MsalProvider>\r\n        );\r\n    } else {\r\n        return (\r\n            <LoginContext.Provider\r\n                value={{\r\n                    loggedIn,\r\n                    setLoggedIn\r\n                }}\r\n            >\r\n                <Layout />\r\n            </LoginContext.Provider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default LayoutWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\r\nimport { msalConfig, useLogin } from \"./authConfig\";\r\nimport { useState } from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport LayoutWrapper from \"./layoutWrapper\";\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <LayoutWrapper />,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/ask/Ask\")\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <RouterProvider router={router} />\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-38720978.js"}